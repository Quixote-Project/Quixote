From 4788def1eb73ddedf276a5d6cdea735e0337dbdd Mon Sep 17 00:00:00 2001
From: "Dr. Greg" <greg@enjellic.com>
Date: Sat, 6 Mar 2021 09:38:37 -0600
Subject: [PATCH 36/50] Restrict access to pseudo-files for external evaluator.

Access to the readable pseudo-files that describe the event state
were restricted when the event space was sealed.  Extend this
restriction to event spaces that are using an external evaluator.

Previous to this point the following two pseudo-files were not
enjoying restricted access even when the event state was sealed:

/sys/kernel/security/integrity/events/measurement

/sys/kernel/security/integrity/events/forensics

This update adds access restrictions to these two pseudo-files so
that all of the readable state description files now have the
same access characteristics.
---
 security/integrity/ima/ima_events.c | 22 +++++++++++++++-------
 1 file changed, 15 insertions(+), 7 deletions(-)

diff --git a/security/integrity/ima/ima_events.c b/security/integrity/ima/ima_events.c
index bd418a121164..9bfcfb3d7bca 100644
--- a/security/integrity/ima/ima_events.c
+++ b/security/integrity/ima/ima_events.c
@@ -901,7 +901,7 @@ static int ima_trajectory_open(struct inode *inode, struct file *file)
 {
 	struct ima_events_map *map = current_map();
 
-	if (map->domain_sealed)
+	if (map->domain_sealed || map->external)
 		return -EACCES;
 	return seq_open(file, &ima_trajectory_seqops);
 }
@@ -955,7 +955,7 @@ static int ima_point_open(struct inode *inode, struct file *file)
 {
 	struct ima_events_map *map = current_map();
 
-	if (map->domain_sealed)
+	if (map->domain_sealed || map->external)
 		return -EACCES;
 	return seq_open(file, &ima_point_seqops);
 }
@@ -971,7 +971,7 @@ static int ima_open_map(struct inode * inode, struct file * filp)
 {
 	struct ima_events_map *map = current_map();
 
-	if (map->domain_sealed)
+	if (map->domain_sealed || map->external)
 		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
@@ -1017,7 +1017,7 @@ static int ima_open_pseudonym(struct inode * inode, struct file * filp)
 {
 	struct ima_events_map *map = current_map();
 
-	if (map->domain_sealed)
+	if (map->domain_sealed || map->external)
 		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
@@ -1065,7 +1065,7 @@ static int ima_open_base(struct inode * inode, struct file * filp)
 {
 	struct ima_events_map *map = current_map();
 
-	if (map->domain_sealed)
+	if (map->domain_sealed || map->external)
 		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
@@ -1131,7 +1131,7 @@ static int ima_open_sealed(struct inode * inode, struct file * filp)
 {
 	struct ima_events_map *map = current_map();
 
-	if (map->domain_sealed)
+	if (map->domain_sealed || map->external)
 		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
@@ -1197,7 +1197,7 @@ static int ima_open_external(struct inode * inode, struct file * filp)
 {
 	struct ima_events_map *map = current_map();
 
-	if (map->domain_sealed)
+	if (map->domain_sealed || map->external)
 		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
@@ -1306,6 +1306,10 @@ static const struct seq_operations ima_forensics_seqops = {
 
 static int ima_forensics_open(struct inode *inode, struct file *file)
 {
+	struct ima_events_map *map = current_map();
+
+	if (map->domain_sealed || map->external)
+		return -EACCES;
 	return seq_open(file, &ima_forensics_seqops);
 }
 
@@ -1354,6 +1358,10 @@ static const struct seq_operations ima_measurement_seqops = {
 
 static int ima_measurement_open(struct inode *inode, struct file *file)
 {
+	struct ima_events_map *map = current_map();
+
+	if (map->domain_sealed || map->external)
+		return -EACCES;
 	return seq_open(file, &ima_measurement_seqops);
 }
 
-- 
2.31.1

