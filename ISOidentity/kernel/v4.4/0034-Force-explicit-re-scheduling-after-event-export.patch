From c8a0f624e31d011ed577a8257e0147b6d8dc73c7 Mon Sep 17 00:00:00 2001
From: "Dr. Greg Wettstein" <greg@enjellic.com>
Date: Sat, 28 Oct 2017 17:48:42 -0500
Subject: [PATCH 34/37] Force explicit re-scheduling after event export.

Testing with only userspace disciplining of processes indicated
that a race condition existed which opened a window for a process
which has engaged in an extra-dimensional behavior to fork before
its bad actor status was set.  This created a scenario where a
process which was subordinate to the behavior violating process
would not be disciplined.

The race condition could also be exercised by a utility which
took a file and a string to write to the file on the command-line
of a shell script.  Writes to the file would not be reliably
blocked.

This race was called with the addition of an explicit schedule()
call after the sysfs poll notification was issued after an
information exchange event was registered.

This needs additional testing, particularly in an SMP
environment, to verify that this removes the possibility of a
process not being properly disciplined.  It may be an open
question whether or not purely userspace disciplining is feasible.

A better approach may be due to have the modeling engine simply
verify that a process has been disciplined when an
extra-dimensional behavior event is detected.
---
 security/integrity/ima/ima_identity.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/security/integrity/ima/ima_identity.c b/security/integrity/ima/ima_identity.c
index 6db4c445bd87..f8398574e719 100644
--- a/security/integrity/ima/ima_identity.c
+++ b/security/integrity/ima/ima_identity.c
@@ -491,6 +491,7 @@ static int add_exchange_event(const char *filename,
 	mutex_unlock(&map->measurement_mutex);
 
 	sysfs_notify(iso_identity_kobject, NULL, map->update.attr.name);
+	schedule();
 
  done:
 	return retn;
-- 
2.16.2

