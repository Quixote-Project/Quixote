From 6276e4e5233e01e0843ec739726ae6f32993a142 Mon Sep 17 00:00:00 2001
From: "Dr. Greg Wettstein" <greg@enjellic.com>
Date: Mon, 17 Sep 2018 03:35:47 -0500
Subject: [PATCH 35/37] Implement AI hook for socket opens.

This update implements an autonomous introspection LSM hook
function for regulating requests to execute socket connections.
This allows a process that has gone into extra-dimensional status
to be blocked from executing outbound socket connections.
---
 security/ai/ai.c | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/security/ai/ai.c b/security/ai/ai.c
index 63acfc88b151..b3d18b059792 100644
--- a/security/ai/ai.c
+++ b/security/ai/ai.c
@@ -11,6 +11,7 @@
  */
 #include <linux/sched.h>
 #include <linux/fs.h>
+#include <linux/socket.h>
 #include <linux/lsm_hooks.h>
 
 
@@ -48,12 +49,38 @@ static int ai_file_open(struct file *f, const struct cred *cred)
 }
 
 
+/**
+ * ai_file_open - Introspection hook to intercept socket connections.
+ *
+ * @sock:	A pointer to the socket structure being used to
+ *	        implement the connection.
+ * @addr:	A pointer to the socket address that defines the
+ *		the endpoint being requested.
+ * @addr_len:	The length of the socket address.
+ *
+ * Returns 0 on success, negative value otherwise.
+ */
+
+static int ai_socket_connect(struct socket *sock, struct sockaddr *addr,
+			     int addr_len)
+
+{
+	if ( !current->bad_actor )
+		return 0;
+
+	pr_info("%s: Refused socket open, family=%u, length=%d, addr=%*phN\n", 
+		__func__, addr->sa_family, addr_len, addr_len, addr->sa_data);
+	return -EPERM;
+}
+
+
 /*
  * The following array holds the introspection hooks which are
  * implemented.
  */
 static struct security_hook_list ai_hooks[] = {
-	LSM_HOOK_INIT(file_open, ai_file_open)
+	LSM_HOOK_INIT(file_open, ai_file_open),
+	LSM_HOOK_INIT(socket_connect, ai_socket_connect)
 };
 
 
-- 
2.16.2

