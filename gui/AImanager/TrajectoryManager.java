/**
 * \file
 * This file implements an object which has the responsibility of
 * managing the trajectory path of an ISOidentity model instance.
 */

/**************************************************************************
 * (C)Copyright IDfusion, LLC. All rights reserved.
 *
 * Please refer to the file named Documentation/COPYRIGHT in the top of
 * the source tree for copyright and licensing information.
 **************************************************************************/


/* Package and import statements follow below. */
import java.util.ArrayList;

import java.awt.Font;

import javax.swing.JTextArea;


/**
 * The <code>ContoursManager</code> object encapsulates all of the
 * functionality for the management of the tab that displays the behavioral
 * contour map of a canister.
 */

public class TrajectoryManager
    extends JTextArea {


    /**
     * Set to an error message generated by the communication parsers.
     */
    private String Error_Message;

    /**
     * The object linking this instance of a <code>ContourManager</code>
     * to a canister manager that is being interrogated.
     */
    private CbootManager Target;


    /**
     * The constructor call for creating a <code>TrajectoryManager</code>
     * object.
     *
     * @param target A <code>CbootManager</code> object which
     * provides a communication channel to a canister instance.
     */
    public TrajectoryManager(CbootManager target) {

	Target = target;
	super.setFont(new Font("monospaced", Font.PLAIN, 16));

	return;
    }


    /**
     * The <code>update_contours</code> sends a command request to obtain
     * the current set of behavioral contour points from a canister instance.
     *
     * @return A <code>boolean</code> value is used to indicate the status
     * of the contour retrieval.  A true command is used to indicate the
     * update was successful.
     */
    public boolean update_trajectory() {

	int lp;

	ArrayList<String> trajectory = new ArrayList<String>();


	if ( !Target.get_trajectory(trajectory) )
	    return false;

	for (lp= 0; lp < trajectory.size(); ++lp)
	    this.append(trajectory.get(lp) + "\n");

	return true;
    }

}
