From dc467858df2cd77f9d75ff77407d5b17f474a6f9 Mon Sep 17 00:00:00 2001
From: "Dr. Greg Wettstein" <greg@enjellic.com>
Date: Thu, 13 Apr 2017 14:32:40 -0500
Subject: [PATCH 22/24] Explicitly protect iso-identity pseudo configuration
 file access.

The implementation of behavior namespaces made the old approach
of removing the sysfs pseudo-files which allow configuration of
the behavior domain no longer function properly.  While writing
to the pseudo-files would properly manipulate the processes
current behavior namespace there was still only a single instance
of the files themselves.

This caused the control files to dissapear in all behavioral
domains if a domain in another namespace was sealed.

The code which removes the pseudo-files on sealing was removed.
Access controls to these files were implemented by explicitly
checking the domain_sealed variable in the current namespace for
each of the files which is rendered inaccessible by sealing.
---
 security/integrity/ima/ima_identity.c | 37 +++++++++++++++++++++++++++--------
 1 file changed, 29 insertions(+), 8 deletions(-)

diff --git a/security/integrity/ima/ima_identity.c b/security/integrity/ima/ima_identity.c
index 2b4768f2b3bb..63d938c06bfb 100644
--- a/security/integrity/ima/ima_identity.c
+++ b/security/integrity/ima/ima_identity.c
@@ -620,6 +620,10 @@ static const struct seq_operations ima_trajectory_seqops = {
 
 static int ima_trajectory_open(struct inode *inode, struct file *file)
 {
+	struct iso_identity_map *map = current_map();
+
+	if (map->domain_sealed)
+		return -EACCES;
 	return seq_open(file, &ima_trajectory_seqops);
 }
 
@@ -670,6 +674,10 @@ static const struct seq_operations ima_contours_seqops = {
 
 static int ima_contours_open(struct inode *inode, struct file *file)
 {
+	struct iso_identity_map *map = current_map();
+
+	if (map->domain_sealed)
+		return -EACCES;
 	return seq_open(file, &ima_contours_seqops);
 }
 
@@ -682,6 +690,10 @@ static const struct file_operations ima_contours_ops = {
 
 static int ima_open_map(struct inode * inode, struct file * filp)
 {
+	struct iso_identity_map *map = current_map();
+
+	if (map->domain_sealed)
+		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
 	if (atomic_dec_and_test(&map_opencount))
@@ -724,6 +736,10 @@ static const struct file_operations ima_map_ops = {
 
 static int ima_open_pseudonym(struct inode * inode, struct file * filp)
 {
+	struct iso_identity_map *map = current_map();
+
+	if (map->domain_sealed)
+		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
 	return 0;
@@ -768,6 +784,10 @@ static const struct file_operations ima_pseudonym_ops = {
 
 static int ima_open_host_identity(struct inode * inode, struct file * filp)
 {
+	struct iso_identity_map *map = current_map();
+
+	if (map->domain_sealed)
+		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
 	return 0;
@@ -829,6 +849,10 @@ static const struct file_operations ima_host_identity_ops = {
 
 static int ima_open_sealed(struct inode * inode, struct file * filp)
 {
+	struct iso_identity_map *map = current_map();
+
+	if (map->domain_sealed)
+		return -EACCES;
 	if (!(filp->f_flags & O_WRONLY))
 		return -EACCES;
 	return 0;
@@ -875,14 +899,6 @@ done:
 
 static int ima_release_sealed(struct inode *inode, struct file *file)
 {
-	struct iso_identity_map *bmap = current_map();
-
-	if (bmap->domain_sealed) {
-		securityfs_remove(contours);
-		securityfs_remove(map);
-		securityfs_remove(pseudonym);
-		securityfs_remove(host_identity);
-	}
 	return 0;
 }
 
@@ -1514,6 +1530,7 @@ SYSCALL_DEFINE3(set_behavior, unsigned char *, bufr, size_t, cnt,
 		unsigned long, flags)
 {
 	int retn = -EINVAL;
+	struct iso_identity_map *map = current_map();
 
 #if 0
 	pr_info("[%s]: Called: cnt=%zu, flags=%lu.\n", __func__, cnt, flags);
@@ -1526,11 +1543,15 @@ SYSCALL_DEFINE3(set_behavior, unsigned char *, bufr, size_t, cnt,
 
 
 	if (flags & IMA_SET_PSEUDONYM) {
+		if (map->domain_sealed)
+			return -EPERM;
 		retn = load_pseudonym(bufr, cnt);
 		goto done;
 	}
 
 	if (flags & IMA_SET_CONTOUR) {
+		if (map->domain_sealed)
+			return -EPERM;
 		retn = load_contour(bufr, cnt);
 		goto done;
 	}
-- 
2.11.0

