From c4870bfe7bd4e4fa703505d40006d1f9bba82d6f Mon Sep 17 00:00:00 2001
From: "Dr. Greg Wettstein" <greg@enjellic.com>
Date: Thu, 26 Oct 2017 02:11:33 -0500
Subject: [PATCH 33/37] Add bad actor system call support.

This update provides support for the implementation of a system
call which can either set or query the 'bad actor' status of a
process.  The 'bad actor' attribute indicates the process has
engaged in an extra-dimensional behavior event.  This is an
information exchange event which is not in the current behavioral
map after the behavior model status has been sealed.

The sys_set_bad_actor system call takes a process identifer
(PID) and a flags arguement.  The PID is the process which is to
have its status queried or set.  The flags arguement is used to
indicate whethe the status of the specified pid is to be set or
queried.  A flags value of zero is used to query the status while
a flag of 1 indicates the bad actor status is to be set.

This system call provides the ability for a userspace
disciplining process to control and/or discipline a process based
on behaviors events which are exported to the userspace daemon by
a process running in a canister.
---
 arch/x86/entry/syscalls/syscall_32.tbl |  1 +
 arch/x86/entry/syscalls/syscall_64.tbl |  1 +
 include/linux/syscalls.h               |  1 +
 include/uapi/asm-generic/unistd.h      |  4 +++-
 kernel/sys_ni.c                        |  1 +
 security/integrity/ima/ima_identity.c  | 29 +++++++++++++++++++++++++++++
 6 files changed, 36 insertions(+), 1 deletion(-)

diff --git a/arch/x86/entry/syscalls/syscall_32.tbl b/arch/x86/entry/syscalls/syscall_32.tbl
index 6ad57e17649c..8601a8ab6bc3 100644
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@ -384,3 +384,4 @@
 375	i386	membarrier		sys_membarrier
 376	i386	mlock2			sys_mlock2
 377	i386	set_behavior		sys_set_behavior
+378	i386	set_bad_actor		sys_set_bad_actor
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index 946c8830de3d..a2c572ff9acb 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -333,6 +333,7 @@
 324	common	membarrier		sys_membarrier
 325	common	mlock2			sys_mlock2
 326	common	set_behavior		sys_set_behavior
+327	common	set_bad_actor		sys_set_bad_actor
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 33d37d64a554..34d7d7ad5f54 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -894,4 +894,5 @@ asmlinkage long sys_mlock2(unsigned long start, size_t len, int flags);
 #ifdef CONFIG_IMA
 asmlinkage long sys_set_behavior(unsigned char __user * buf, size_t cnt,
 				 unsigned long flags);
+asmlinkage long sys_set_bad_actor(pid_t pid, unsigned long flags);
 #endif
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 333dc99669bd..bfe6b7e92e5a 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -718,9 +718,11 @@ __SYSCALL(__NR_mlock2, sys_mlock2)
 
 #define __NR_set_behavior 285
 __SYSCALL(__NR_set_behavior, sys_set_behavior)
+#define __NR_set_bad_actor 286
+__SYSCALL(__NR_set_bad_actor, sys_set_bad_actor)
 
 #undef __NR_syscalls
-#define __NR_syscalls 286
+#define __NR_syscalls 287
 
 /*
  * All syscalls below here should go away really,
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index 87abf5025597..c546f96bff64 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -252,3 +252,4 @@ cond_syscall(sys_membarrier);
 
 /* Set system behavior parameters */
 cond_syscall(sys_set_behavior);
+cond_syscall(sys_set_bad_actor);
diff --git a/security/integrity/ima/ima_identity.c b/security/integrity/ima/ima_identity.c
index 89b53fb6996a..6db4c445bd87 100644
--- a/security/integrity/ima/ima_identity.c
+++ b/security/integrity/ima/ima_identity.c
@@ -1925,6 +1925,35 @@ struct iso_identity_namespace *ima_copy_behavior_ns(unsigned long flags,
 	return ns;
 }
 
+SYSCALL_DEFINE2(set_bad_actor, pid_t, pid, unsigned long, flags)
+{
+	int retn = -ESRCH;
+	struct task_struct *actor;
+
+	if (!capable(CAP_SYS_ADMIN))
+		return -EPERM;
+
+	rcu_read_lock();
+	actor = find_task_by_vpid(pid);
+	if (actor != NULL) {
+		if (flags == 0) {
+			pr_debug("[%s]: Checking actor status, pid=%u\n",
+				 __func__, pid);
+			retn = actor->bad_actor;
+		}
+
+		if (flags == 1) {
+			pr_info("[%s]: Setting actor status, pid=%u\n",
+				__func__, pid);
+			actor->bad_actor = 1;
+			retn = 0;
+		}
+	}
+	rcu_read_unlock();
+
+	return retn;
+}
+
 SYSCALL_DEFINE3(set_behavior, unsigned char *, bufr, size_t, cnt,
 		unsigned long, flags)
 {
-- 
2.16.2

