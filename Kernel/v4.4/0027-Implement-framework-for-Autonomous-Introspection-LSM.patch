From 49366ac97df158a67da669ee426322619f457aeb Mon Sep 17 00:00:00 2001
From: "Dr. Greg Wettstein" <greg@enjellic.com>
Date: Mon, 4 Sep 2017 15:01:15 -0500
Subject: [PATCH 27/37] Implement framework for Autonomous Introspection LSM.

With support in place to designate that a context of execution
(process) has engaged in an unclassified behavior a framework is
needed to discipline or regulate the subsequent actions of the
process.  The most straight forward and complete way to do this
is through the implementation of a Linux Security Module (LSM).

Since the LSM hooks, by definition, cover all of the security
sensitive pathways in the kernel they offer the most complete
framework for regulating the behavior of a process.

This update implements the basic framework and infrastructure on
which subsequent support can be built for a complete security
framework.  As a prototype example this initial implementation
captures any attempts to open a file and will block any attempts
to read a file or to write and/or truncate the file.

Since reads are effectively blocked the process cannot spawn any
additional processes since attempts to read an execute are
blocked.
---
 security/Kconfig     |  1 +
 security/Makefile    |  2 ++
 security/ai/Kconfig  | 12 +++++++++
 security/ai/Makefile |  3 +++
 security/ai/ai.c     | 75 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 93 insertions(+)
 create mode 100644 security/ai/Kconfig
 create mode 100644 security/ai/Makefile
 create mode 100644 security/ai/ai.c

diff --git a/security/Kconfig b/security/Kconfig
index e45237897b43..f6a901b9f4b5 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -123,6 +123,7 @@ source security/smack/Kconfig
 source security/tomoyo/Kconfig
 source security/apparmor/Kconfig
 source security/yama/Kconfig
+source security/ai/Kconfig
 
 source security/integrity/Kconfig
 
diff --git a/security/Makefile b/security/Makefile
index c9bfbc84ff50..abddef71441b 100644
--- a/security/Makefile
+++ b/security/Makefile
@@ -8,6 +8,7 @@ subdir-$(CONFIG_SECURITY_SMACK)		+= smack
 subdir-$(CONFIG_SECURITY_TOMOYO)        += tomoyo
 subdir-$(CONFIG_SECURITY_APPARMOR)	+= apparmor
 subdir-$(CONFIG_SECURITY_YAMA)		+= yama
+subdir-$(CONFIG_SECURITY_AI)		+= ai
 
 # always enable default capabilities
 obj-y					+= commoncap.o
@@ -23,6 +24,7 @@ obj-$(CONFIG_SECURITY_TOMOYO)		+= tomoyo/
 obj-$(CONFIG_SECURITY_APPARMOR)		+= apparmor/
 obj-$(CONFIG_SECURITY_YAMA)		+= yama/
 obj-$(CONFIG_CGROUP_DEVICE)		+= device_cgroup.o
+obj-$(CONFIG_SECURITY_AI)		+= ai/
 
 # Object integrity file lists
 subdir-$(CONFIG_INTEGRITY)		+= integrity
diff --git a/security/ai/Kconfig b/security/ai/Kconfig
new file mode 100644
index 000000000000..154df47e6683
--- /dev/null
+++ b/security/ai/Kconfig
@@ -0,0 +1,12 @@
+config SECURITY_AI
+	bool "Autonomous Introspection Support"
+	depends on SECURITY
+	depends on NET
+	depends on IMA
+	select SECURITYFS
+	default n
+	help
+	  This option selects support for Autonomous Introspection which
+	  implements the ability to regulate the behavior of a process
+	  if it has engaged in an extra-dimensional behavior.
+	  If you are unsure how to answer this question, answer N.
diff --git a/security/ai/Makefile b/security/ai/Makefile
new file mode 100644
index 000000000000..b71b3aa6b683
--- /dev/null
+++ b/security/ai/Makefile
@@ -0,0 +1,3 @@
+obj-$(CONFIG_SECURITY_AI) := ai.o
+
+# ai-y := ai.o
diff --git a/security/ai/ai.c b/security/ai/ai.c
new file mode 100644
index 000000000000..63acfc88b151
--- /dev/null
+++ b/security/ai/ai.c
@@ -0,0 +1,75 @@
+/*
+ * Copyright (c) 2020, Enjellic Systems Development, LLC. All rights reserved.
+ *
+ * Authors:
+ * Dr. Greg <greg@enjellic.com>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, version 2 of the
+ * License.
+ */
+#include <linux/sched.h>
+#include <linux/fs.h>
+#include <linux/lsm_hooks.h>
+
+
+/**
+ * ai_file_open - Introspection hook to intercept file opens.
+ *
+ * @f:    Pointer to "struct file".
+ * @cred: Pointer to "struct cred".
+ *
+ * Returns 0 on success, negative value otherwise.
+ */
+static int ai_file_open(struct file *f, const struct cred *cred)
+{
+	if ( current->bad_actor ) {
+		pr_info("%s: Bad actor=%s, subject=%s, flags=0x%x\n", __func__,
+			current->comm, f->f_path.dentry->d_name.name,
+			f->f_flags);
+
+		if ( ((f->f_flags & O_ACCMODE) == O_RDONLY) ||
+		     (f->f_flags & O_RDWR) ) {
+			pr_info("%s: Restricting read %s access to %s.\n",
+				__func__, current->comm,
+				f->f_path.dentry->d_name.name);
+			return -EPERM;
+		}
+
+		if ( f->f_flags & (O_CREAT | O_TRUNC | O_WRONLY | O_RDWR) ) {
+			pr_info("%s: Restricting write %s access to %s.\n",
+				__func__, current->comm,
+				f->f_path.dentry->d_name.name);
+			return -EPERM;
+		}
+	}
+	return 0;
+}
+
+
+/*
+ * The following array holds the introspection hooks which are
+ * implemented.
+ */
+static struct security_hook_list ai_hooks[] = {
+	LSM_HOOK_INIT(file_open, ai_file_open)
+};
+
+
+/**
+ * ai_init - Register Autonomous Introspection as a security module.
+ */
+static int __init ai_init(void)
+{
+	if (!security_module_enable("ai"))
+		return 0;
+
+	/* Register introspection hooks. */
+	security_add_hooks(ai_hooks, ARRAY_SIZE(ai_hooks));
+
+	printk(KERN_INFO "AI security initialized.\n");
+	return 0;
+}
+
+security_initcall(ai_init);
-- 
2.16.2

