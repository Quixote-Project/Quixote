From 89a17b392ce08b3b71c5e430f343827923e615a8 Mon Sep 17 00:00:00 2001
From: "Dr. Greg Wettstein" <greg@enjellic.com>
Date: Sat, 21 Oct 2017 02:36:32 -0500
Subject: [PATCH 32/37] Add support for generate sealing events.

This update provides support for generating the following event
message:

sealed

In response to writing a value of 1 to the following pseudo-file:

/sys/kernel/security/ima/iso-identity/sealed

A static method named 'generate_event' was added to encapsulate
the functionality needed to add an event to the canister event
list.  In addition to adding the event description structure to
the event list it generates the polling event notification to the
pseudo-file which is representing the canister event stream.

This function needs to be made more static and the other event
generation points need to be updated to use this function.
---
 security/integrity/ima/ima_identity.c | 43 ++++++++++++++++++++++++++++++++++-
 1 file changed, 42 insertions(+), 1 deletion(-)

diff --git a/security/integrity/ima/ima_identity.c b/security/integrity/ima/ima_identity.c
index cd67059f1d5e..89b53fb6996a 100644
--- a/security/integrity/ima/ima_identity.c
+++ b/security/integrity/ima/ima_identity.c
@@ -106,7 +106,8 @@ struct trajectory {
 enum event_types {
 	measurement_event=1,
 	exchange_event,
-	aggregate_event
+	aggregate_event,
+	seal_event
 };
 
 /* Structure defining a model event. */
@@ -187,6 +188,39 @@ static struct iso_identity_map *current_map(void)
 	return init_iso_identity_ns.map;
 }
 
+/**
+ *	emit_event - This function is responsible for nerating a
+ *	userspace behavior event.
+ *	@map:	The behavior namespace the event is to be generated in.
+ *	@event: the enumerated event type.
+ *
+ *	returns the status of event generation.
+ */
+
+static int generate_event(struct iso_identity_map *map, enum event_types event)
+{
+	int retn=0;
+
+	struct event *mp;
+
+	mp = kzalloc(sizeof(struct event), GFP_KERNEL);
+	if (!mp) {
+		retn = -ENOMEM;
+		goto done;
+	}
+
+	mp->type = event;
+
+	mutex_lock(&map->measurement_mutex);
+	list_add_tail(&mp->list, &map->measurement_list);
+	mutex_unlock(&map->measurement_mutex);
+
+	sysfs_notify(iso_identity_kobject, NULL, map->update.attr.name);
+
+ done:
+	return retn;
+}
+
 /**
  *	get_identity - Obtain user identity factors.
  *	*id: A pointer to the user identity structure to be populated.
@@ -733,6 +767,10 @@ static ssize_t show_ns_update(struct kobject *kobj,
 				       WP256_DIGEST_SIZE,
 				       mp->u.exchange->subject.digest);
 			break;
+
+		case seal_event:
+			retn = sprintf(page, "%s", "sealed\n");
+			break;
 	}
 
 	list_del(&mp->list);
@@ -1064,6 +1102,9 @@ static ssize_t ima_write_sealed(struct file *file,
 	}
 	map->domain_sealed = true;
 	pr_info("[%s]: Sealed identity domain.\n", __func__);
+	retn = generate_event(map, seal_event);
+	if (retn)
+		goto done;
 	retn = datalen;
 
 done:
-- 
2.16.2

