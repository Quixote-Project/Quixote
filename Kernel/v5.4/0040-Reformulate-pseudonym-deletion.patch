From e7f6182d7a73b2bb8ff8a73889c47d7bde8e4fb4 Mon Sep 17 00:00:00 2001
From: "Dr. Greg" <greg@enjellic.com>
Date: Mon, 29 Mar 2021 19:11:56 -0500
Subject: [PATCH 40/50] Reformulate pseudonym deletion.

The unlink of an inode that has been declared to be a pseudonym
was previously handled calling the integrity_inode_free()
function in the security_inode_unlink() function.  This was
arguably a layering violation and is no longer effective given
the new pseudonym architecture that registers the integrity inode
in the namespace pseudonym list.

The logical place to move this is to the TE security module since
it allows the functionality to be properly enclosed in the Turing
Event modeling architecture.

A new function named ima_events_remove_pseudonym was added to
search the namespace pseudonym list for the integrity inode
associated with the inode being unlinked.  The te_inode_unlink()
function was added and registered as a security hook.  This hook
simply calls the ima_events_remove_pseudonym() function if the p
rocess is not considered to be a bad actor.  At the point of this
update the function does not return a code indicating the action
is refused if the process is a bad actor.
---
 include/linux/ima.h                 |  1 +
 security/integrity/ima/ima_events.c | 35 +++++++++++++++++++++++++++++
 security/security.c                 |  1 -
 security/te/te.c                    | 18 +++++++++++++++
 4 files changed, 54 insertions(+), 1 deletion(-)

diff --git a/include/linux/ima.h b/include/linux/ima.h
index 2bde8dd43b00..7b040c18c938 100644
--- a/include/linux/ima.h
+++ b/include/linux/ima.h
@@ -53,6 +53,7 @@ static inline const char * const *arch_get_ima_policy(void)
 }
 #endif
 
+void ima_events_remove_pseudonym(struct inode *inode);
 extern struct ima_events_namespace * ima_copy_events_ns(unsigned long,
 						struct user_namespace *,
 						struct ima_events_namespace *);
diff --git a/security/integrity/ima/ima_events.c b/security/integrity/ima/ima_events.c
index 12c2c2fc2f87..d92472279359 100644
--- a/security/integrity/ima/ima_events.c
+++ b/security/integrity/ima/ima_events.c
@@ -1906,6 +1906,41 @@ bool ima_events_is_pseudonym(struct integrity_iint_cache *iint)
 	return retn;
 }
 
+/**
+ * ima_events_remove_pseudonym() - Unlink a pseudonym from a namepsace.
+ * @iint: Inode to be checked for pseudonym status.
+ *
+ * This function is called to handle the release of a pseudonym in
+ * a namespace when its inode is unlinked.
+ */
+
+void ima_events_remove_pseudonym(struct inode *inode)
+{
+	struct ima_events_map *map = current_map();
+	struct integrity_iint_cache *iint;
+	struct pseudonym *sentry, *tmp_sentry;
+
+	if (!IS_IMA(inode))
+		return;
+	iint = integrity_iint_find(inode);
+
+	mutex_lock(&map->pseudonym_mutex);
+	list_for_each_entry_safe(sentry, tmp_sentry, &map->pseudonym_list,
+				 list) {
+		if (sentry->iint == iint) {
+			pr_debug("Unlinked pseudonym: %ld\n",
+				 sentry->iint->inode->i_ino);
+			list_del(&sentry->list);
+			kfree(sentry);
+			goto done;
+		}
+	}
+
+ done:
+	mutex_unlock(&map->pseudonym_mutex);
+	return;
+}
+
 int ima_measure_ns(const u8 *hash)
 {
 	int retn = 1;
diff --git a/security/security.c b/security/security.c
index 590274ddd1d6..1bc000f834e2 100644
--- a/security/security.c
+++ b/security/security.c
@@ -1128,7 +1128,6 @@ int security_inode_unlink(struct inode *dir, struct dentry *dentry)
 {
 	if (unlikely(IS_PRIVATE(d_backing_inode(dentry))))
 		return 0;
-	integrity_inode_free(dentry->d_inode);
 	return call_int_hook(inode_unlink, 0, dir, dentry);
 }
 
diff --git a/security/te/te.c b/security/te/te.c
index 2370bbef9a97..4bdb561439fb 100644
--- a/security/te/te.c
+++ b/security/te/te.c
@@ -60,6 +60,23 @@ static int te_file_open(struct file *f)
 	return ima_events_process_te(TE_file_open);
 }
 
+/**
+ * te_inode_unlink - Introspection hook to intercept inode hard unlink.
+ *
+ * @dir:	Pointer inode entry for enclosing directory.
+ * @dentry:	Pointer to the directory entry for the file.
+ *
+ * Returns 0 on success, negative value otherwise.
+ */
+static int te_inode_unlink(struct inode *dir, struct dentry *dentry)
+{
+	bool retn = 0;
+
+	if (!current->bad_actor)
+		ima_events_remove_pseudonym(dentry->d_inode);
+
+	return retn;
+}
 
 /**
  * te_socket_connect - Introspection hook to intercept socket connections.
@@ -113,6 +130,7 @@ static int te_socket_listen(struct socket *sock, int backlog)
  */
 static struct security_hook_list te_hooks[] __lsm_ro_after_init = {
 	LSM_HOOK_INIT(file_open, te_file_open),
+	LSM_HOOK_INIT(inode_unlink, te_inode_unlink),
 	LSM_HOOK_INIT(socket_connect, te_socket_connect),
 	LSM_HOOK_INIT(socket_listen, te_socket_listen)
 };
-- 
2.31.1

