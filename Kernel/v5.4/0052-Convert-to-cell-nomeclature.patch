From 1633ffe050bb327847480b6058d28ade319dcd80 Mon Sep 17 00:00:00 2001
From: "Dr. Greg" <greg@enjellic.com>
Date: Wed, 13 Oct 2021 20:03:01 -0500
Subject: [PATCH 52/55] Convert to cell nomeclature.

This update continues the conversion to the Quixote nomenclature
by changing the terminology for the data sync/source of a
security event to cell.
---
 security/integrity/ima/ima.h              |   3 +-
 security/integrity/ima/ima_events.c       | 163 +++++++++++-----------
 security/integrity/ima/ima_template.c     |   4 +-
 security/integrity/ima/ima_template_lib.c |  13 +-
 security/integrity/ima/ima_template_lib.h |   2 +-
 5 files changed, 93 insertions(+), 92 deletions(-)

diff --git a/security/integrity/ima/ima.h b/security/integrity/ima/ima.h
index 3b99b1da9af9..72d1a5a9a047 100644
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@ -1,3 +1,4 @@
+
 /* SPDX-License-Identifier: GPL-2.0-only */
 /*
  * Copyright (C) 2005,2006,2007,2008 IBM Corporation
@@ -170,7 +171,7 @@ int ima_lsm_policy_change(struct notifier_block *nb, unsigned long event,
 int ima_events_init(void);
 int ima_events_genhash(struct ima_template_entry *, char *);
 int ima_get_COE(struct ima_field_data *, char *);
-int ima_get_subject(struct ima_event_data *, struct ima_field_data *, char *);
+int ima_get_cell(struct ima_event_data *, struct ima_field_data *, char *);
 int ima_events_is_mapped(int, struct integrity_iint_cache *iint,
 			 struct file *file, const char *pathname,
 			   struct ima_template_desc *, int);
diff --git a/security/integrity/ima/ima_events.c b/security/integrity/ima/ima_events.c
index 3bbe74149f64..474e508a3477 100644
--- a/security/integrity/ima/ima_events.c
+++ b/security/integrity/ima/ima_events.c
@@ -52,8 +52,8 @@ struct event_COE {
 	} capability;
 } __packed;
 
-/* Structure defining subject elements. */
-struct event_subject {
+/* Structure defining cell parameters. */
+struct event_cell {
 	uid_t uid;
 	gid_t gid;
 	umode_t mode;
@@ -149,7 +149,7 @@ struct trajectory {
 	char *process;
 	pid_t pid;
 	struct event_COE COE;
-	struct event_subject subject;
+	struct event_cell cell;
 };
 
 /* Types of events. */
@@ -490,7 +490,7 @@ static int add_event_point(char *point, bool valid)
 
 static struct trajectory * create_point(const char *filename,
 					struct event_COE *COE,
-					struct event_subject *subject)
+					struct event_cell *cell)
 {
 	bool err = true;
 	char *fname = NULL, *process = NULL;
@@ -512,7 +512,7 @@ static struct trajectory * create_point(const char *filename,
 	strcpy(entry->process, current->comm);
 	entry->pid = task_pid_nr(current);
 	entry->COE = *COE;
-	entry->subject = *subject;
+	entry->cell = *cell;
 
 	err = false;
 
@@ -527,21 +527,21 @@ static struct trajectory * create_point(const char *filename,
  *	add_trajectory_point - Add a point to the event trajectory.
  *	@filename: The name of the event.
  *	@COE: The COE elements.
- *	@subject: The subject event elements.
+ *	@cell: The cell event parameters.
  *
  *	Returns a non-zero value on a failure to add a point.
  */
 
 static int add_trajectory_point(const char *filename,
 				struct event_COE *COE,
-				struct event_subject *subject)
+				struct event_cell *cell)
 {
 	int retn = 1;
 	char *fname = NULL, *process = NULL;
 	struct trajectory *entry;
 	struct ima_events_map *map= current_map();
 
-	entry = create_point(filename, COE, subject);
+	entry = create_point(filename, COE, cell);
 	if ( !entry )
 		goto done;
 
@@ -565,14 +565,14 @@ static int add_trajectory_point(const char *filename,
  *	event on the trajectory surface.
  *	@filename: The name of the event.
  *	@COE: The COE elements.
- *	@subject: The subject event elements.
+ *	@cell: The cell event elements.
  *
  *	Returns a non-zero value on a failure to add a point.
  */
 
 static int add_forensic_point(const char *filename,
 			      struct event_COE *COE,
-			      struct event_subject *subject)
+			      struct event_cell *cell)
 {
 	int retn = 1;
 	struct trajectory *entry;
@@ -581,7 +581,7 @@ static int add_forensic_point(const char *filename,
 	if (map->forensics_count == map->max_forensics_count)
 		return 1;
 
-	entry = create_point(filename, COE, subject);
+	entry = create_point(filename, COE, cell);
 	if ( !entry )
 		goto done;
 
@@ -599,7 +599,7 @@ static int add_forensic_point(const char *filename,
 }
 
 static int export_event(const char *filename, struct event_COE *COE,
-			struct event_subject *subject)
+			struct event_cell *cell)
 {
 	int retn = 1;
 	struct ima_events_map *map;
@@ -616,7 +616,7 @@ static int export_event(const char *filename, struct event_COE *COE,
 		goto done;
 	}
 
-	event = create_point(filename, COE, subject);
+	event = create_point(filename, COE, cell);
 	if (!event) {
 		retn = -ENOMEM;
 		goto done;
@@ -898,7 +898,7 @@ static ssize_t show_ns_update(struct kobject *kobj,
 				       mp->u.measurement);
 			break;
 		case exchange_event:
-			retn = sprintf(page, "exchange pid{%u} event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
+			retn = sprintf(page, "exchange pid{%u} event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} cell{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
 				       mp->u.exchange->pid,
 				       mp->u.exchange->process,
 				       mp->u.exchange->filename,
@@ -913,17 +913,17 @@ static ssize_t show_ns_update(struct kobject *kobj,
 				       mp->u.exchange->COE.fsgid,
 				       mp->u.exchange->COE.capability.value,
 
-				       mp->u.exchange->subject.uid,
-				       mp->u.exchange->subject.gid,
-				       mp->u.exchange->subject.mode,
-				       mp->u.exchange->subject.name_length,
+				       mp->u.exchange->cell.uid,
+				       mp->u.exchange->cell.gid,
+				       mp->u.exchange->cell.mode,
+				       mp->u.exchange->cell.name_length,
 				       WP256_DIGEST_SIZE,
-				       mp->u.exchange->subject.name,
-				       mp->u.exchange->subject.s_id,
-				       (int) sizeof(mp->u.exchange->subject.s_uuid),
-				       mp->u.exchange->subject.s_uuid,
+				       mp->u.exchange->cell.name,
+				       mp->u.exchange->cell.s_id,
+				       (int) sizeof(mp->u.exchange->cell.s_uuid),
+				       mp->u.exchange->cell.s_uuid,
 				       WP256_DIGEST_SIZE,
-				       mp->u.exchange->subject.digest);
+				       mp->u.exchange->cell.digest);
 			break;
 
 		case seal_event:
@@ -974,15 +974,15 @@ static int ima_trajectory_show(struct seq_file *c, void *trajectory)
 
 	pt = list_entry(trajectory, struct trajectory, list);
 
-	seq_printf(c, "event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
+	seq_printf(c, "event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} cell{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
 		   pt->process, pt->filename, pt->COE.uid, pt->COE.euid,
 		   pt->COE.suid, pt->COE.gid, pt->COE.egid,
 		   pt->COE.sgid, pt->COE.fsuid, pt->COE.fsgid,
-		   pt->COE.capability.value, pt->subject.uid,
-		   pt->subject.gid, pt->subject.mode, pt->subject.name_length,
-		   WP256_DIGEST_SIZE, pt->subject.name, pt->subject.s_id,
-		   (int) sizeof(pt->subject.s_uuid), pt->subject.s_uuid,
-		   WP256_DIGEST_SIZE, pt->subject.digest);
+		   pt->COE.capability.value, pt->cell.uid,
+		   pt->cell.gid, pt->cell.mode, pt->cell.name_length,
+		   WP256_DIGEST_SIZE, pt->cell.name, pt->cell.s_id,
+		   (int) sizeof(pt->cell.s_uuid), pt->cell.s_uuid,
+		   WP256_DIGEST_SIZE, pt->cell.digest);
 
 	return 0;
 }
@@ -1381,15 +1381,15 @@ static int ima_forensics_show(struct seq_file *c, void *event)
 
 	pt = list_entry(event, struct trajectory, list);
 
-	seq_printf(c, "event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
+	seq_printf(c, "event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} cell{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
 		   pt->process, pt->filename, pt->COE.uid, pt->COE.euid,
 		   pt->COE.suid, pt->COE.gid, pt->COE.egid,
 		   pt->COE.sgid, pt->COE.fsuid, pt->COE.fsgid,
-		   pt->COE.capability.value, pt->subject.uid,
-		   pt->subject.gid, pt->subject.mode, pt->subject.name_length,
-		   WP256_DIGEST_SIZE, pt->subject.name, pt->subject.s_id,
-		   (int) sizeof(pt->subject.s_uuid), pt->subject.s_uuid,
-		   WP256_DIGEST_SIZE, pt->subject.digest);
+		   pt->COE.capability.value, pt->cell.uid,
+		   pt->cell.gid, pt->cell.mode, pt->cell.name_length,
+		   WP256_DIGEST_SIZE, pt->cell.name, pt->cell.s_id,
+		   (int) sizeof(pt->cell.s_uuid), pt->cell.s_uuid,
+		   WP256_DIGEST_SIZE, pt->cell.digest);
 
 	return 0;
 }
@@ -1670,8 +1670,8 @@ int ima_get_COE(struct ima_field_data *field_data, char *measurement)
 	return retn;
 }
 
-static int ima_add_subject_name(struct crypto_shash *tfm,
-				struct event_subject *subject,
+static int ima_add_cell_name(struct crypto_shash *tfm,
+				struct event_cell *cell,
 				struct ima_event_data *event_data)
 {
 	const char *filename;
@@ -1689,15 +1689,15 @@ static int ima_add_subject_name(struct crypto_shash *tfm,
 		goto done;
 
 	retn = crypto_shash_finup(shash, filename, strlen(filename),
-				  subject->name);
-	subject->name_length = strlen(filename);
+				  cell->name);
+	cell->name_length = strlen(filename);
 
  done:
 	return retn;
 }
 
-static int ima_get_event_subject(struct crypto_shash *tfm,
-				    struct event_subject *subject,
+static int ima_get_event_cell(struct crypto_shash *tfm,
+				    struct event_cell *cell,
 				    char *measurement)
 {
 	int retn = 0;
@@ -1708,71 +1708,71 @@ static int ima_get_event_subject(struct crypto_shash *tfm,
 	if (retn != 0)
 		goto done;
 
-	retn = crypto_shash_finup(shash, (char *) subject,
-				  sizeof(struct event_subject), measurement);
+	retn = crypto_shash_finup(shash, (char *) cell,
+				  sizeof(struct event_cell), measurement);
 
  done:
 	return retn;
 }
 
-int ima_get_subject(struct ima_event_data *event_data,
+int ima_get_cell(struct ima_event_data *event_data,
 		    struct ima_field_data *field_data, char *measurement)
 {
 	const char *filename;
 	int retn=1;
 	struct crypto_shash *tfm;
-	struct event_subject *subject = NULL;
+	struct event_cell *cell = NULL;
 	struct inode *inode;
 
 	tfm = crypto_alloc_shash("sha256", 0, 0);
 	if (IS_ERR(tfm))
 		return PTR_ERR(tfm);
 
-	subject = kzalloc(sizeof(*subject), GFP_KERNEL);
-	if (!subject)
+	cell = kzalloc(sizeof(*cell), GFP_KERNEL);
+	if (!cell)
 		goto done;
 
 	filename = event_data->filename;
-	memset(subject, '\0', sizeof(struct event_subject));
+	memset(cell, '\0', sizeof(struct event_cell));
 
-	/* Add hash of subject name. */
-	if (ima_add_subject_name(tfm, subject, event_data) != 0)
+	/* Add hash of cell name. */
+	if (ima_add_cell_name(tfm, cell, event_data) != 0)
 		goto done;
 
-	/* Add the digest of the subject. */
+	/* Add the digest of the cell. */
 	if (event_data->iint->ima_hash == NULL)
-		memset(subject->digest, 0xff, WP256_DIGEST_SIZE);
+		memset(cell->digest, 0xff, WP256_DIGEST_SIZE);
 	else
-		memcpy(subject->digest, event_data->iint->ima_hash->digest,
+		memcpy(cell->digest, event_data->iint->ima_hash->digest,
 		       WP256_DIGEST_SIZE);
 
 	if (ima_events_is_pseudonym(event_data->iint)) {
 		pr_debug("Setting pseudonym digest for: %ld\n",
 			 event_data->iint->inode->i_ino);
-		memset(subject->digest, 0x00, WP256_DIGEST_SIZE);
+		memset(cell->digest, 0x00, WP256_DIGEST_SIZE);
 	}
 
-	/* Add subject characteristics. */
+	/* Add cell characteristics. */
 	if (event_data->file) {
 		inode = file_inode(event_data->file);
-		subject->uid = from_kuid(&init_user_ns, inode->i_uid);
-		subject->gid = from_kgid(&init_user_ns, inode->i_gid);
-		subject->mode = inode->i_mode;
-		memcpy(subject->s_id, inode->i_sb->s_id,
-		       sizeof(subject->s_id));
-		memcpy(subject->s_uuid, inode->i_sb->s_uuid.b,
-		       sizeof(subject->s_uuid));
+		cell->uid = from_kuid(&init_user_ns, inode->i_uid);
+		cell->gid = from_kgid(&init_user_ns, inode->i_gid);
+		cell->mode = inode->i_mode;
+		memcpy(cell->s_id, inode->i_sb->s_id,
+		       sizeof(cell->s_id));
+		memcpy(cell->s_uuid, inode->i_sb->s_uuid.b,
+		       sizeof(cell->s_uuid));
 	}
 
-	retn = ima_get_event_subject(tfm, subject, measurement);
+	retn = ima_get_event_cell(tfm, cell, measurement);
 	if (retn)
 		goto done;
-	field_data->point = subject;
+	field_data->point = cell;
 	retn = 0;
 
  done:
 	if (retn)
-		kfree(subject);
+		kfree(cell);
 	crypto_free_shash(tfm);
 	return retn;
 }
@@ -1781,7 +1781,7 @@ static int ima_map_event(int function, struct integrity_iint_cache *iint,
 			 struct ima_template_desc *template_desc,
 			 struct file *file, const char *pathname,
 			 struct event_COE *COE,
-			 struct event_subject *subject, char *mapping)
+			 struct event_cell *cell, char *mapping)
 {
 	int retn, num_fields;
 	struct ima_template_entry *entry;
@@ -1809,7 +1809,7 @@ static int ima_map_event(int function, struct integrity_iint_cache *iint,
 					 num_fields, &hash.hdr);
 
 	*COE = *(struct event_COE *) entry->template_data[0].point;
-	*subject = *(struct event_subject *) entry->template_data[1].point;
+	*cell = *(struct event_cell *) entry->template_data[1].point;
 	memcpy(mapping, hash.digest, sizeof(hash.digest));
 
 	ima_free_template_entry(entry);
@@ -1820,7 +1820,7 @@ static int ima_map_event(int function, struct integrity_iint_cache *iint,
 }
 
 static void ima_set_COE_status(int function, const char *pathname,
-				 struct event_subject *subject,
+				 struct event_cell *cell,
 				 char *mapping)
 {
 	struct ima_events_map *map = current_map();
@@ -1832,9 +1832,9 @@ static void ima_set_COE_status(int function, const char *pathname,
 	if ((function != BPRM_CHECK) && (function != MMAP_CHECK))
 		return;
 
-	pr_debug("[%s]: COE %d:%s function=%d, subject=%*phN, status=%u\n",
+	pr_debug("[%s]: COE %d:%s function=%d, cell=%*phN, status=%u\n",
 		 __func__, current->pid, pathname, function, WP256_DIGEST_SIZE,
-		 subject->digest, current->bad_COE);
+		 cell->digest, current->bad_COE);
 	if (!have_valid_point(mapping)) {
 		current->bad_COE = 1;
 		pr_debug("[%s]: Setting bad COE status.\n", __func__);
@@ -1851,12 +1851,12 @@ int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
 	int retn = 0;
 	char mapping[WP256_DIGEST_SIZE];
 	struct event_COE COE;
-	struct event_subject subject;
+	struct event_cell cell;
 	struct crypto_shash *sha256 = NULL;
 	struct ima_events_map *map = current_map();
 
 	if (ima_map_event(function, iint, template_desc, file, pathname,
-			  &COE, &subject, mapping) != 0)
+			  &COE, &cell, mapping) != 0)
 		return 0;
 
 	if (map->emit_aggregate) {
@@ -1871,11 +1871,11 @@ int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
 	}
 
 	if (map->external) {
-		retn = export_event(pathname, &COE, &subject);
+		retn = export_event(pathname, &COE, &cell);
 		return retn < 0 ? 0 : 1;
 	}
 
-	ima_set_COE_status(function, pathname, &subject, mapping);
+	ima_set_COE_status(function, pathname, &cell, mapping);
 
 	if (have_point(mapping)) {
 		pr_debug("[%s]: Point cache hit path=%s, mapping=%*phN\n",
@@ -1894,22 +1894,21 @@ int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
 	pr_debug("[%s] COE uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=%llx\n", __func__, COE.uid, COE.euid,
 		COE.suid, COE.gid, COE.egid, COE.sgid, COE.fsuid,
 		COE.fsgid, COE.capability.value);
-	pr_debug("[%s] subject: filename=%s, mode=o%o, uid=%u, gid=%u, name size/hash=%u/%*phN, super name/uuid=%s/%*phN, subject=%*phN\n",
-		__func__, pathname, subject.mode, subject.uid, subject.gid,
-		subject.name_length, WP256_DIGEST_SIZE, subject.name,
-		subject.s_id, (int) sizeof(subject.s_uuid), subject.s_uuid,
-		WP256_DIGEST_SIZE, subject.digest);
+	pr_debug("[%s] cell: filename=%s, mode=o%o, uid=%u, gid=%u, name size/hash=%u/%*phN, super name/uuid=%s/%*phN, cell=%*phN\n",
+		__func__, pathname, cell.mode, cell.uid, cell.gid,
+		cell.name_length, WP256_DIGEST_SIZE, cell.name,
+		cell.s_id, (int) sizeof(cell.s_uuid), cell.s_uuid,
+		WP256_DIGEST_SIZE, cell.digest);
 
 	if (map->domain_sealed) {
-		retn = add_forensic_point(pathname, &COE, &subject);
+		retn = add_forensic_point(pathname, &COE, &cell);
 		if (retn == 0 )
 			retn = add_event_point(mapping, false);
 	}
 	else {
 		retn = add_event_point(mapping, true);
 		if (retn == 0)
-			retn = add_trajectory_point(pathname, &COE,
-						    &subject);
+			retn = add_trajectory_point(pathname, &COE, &cell);
 	}
 	if (retn != 0 )
 		retn = 0;
diff --git a/security/integrity/ima/ima_template.c b/security/integrity/ima/ima_template.c
index add366005120..e7a5d28cb3bf 100644
--- a/security/integrity/ima/ima_template.c
+++ b/security/integrity/ima/ima_template.c
@@ -24,7 +24,7 @@ static struct ima_template_desc builtin_templates[] = {
 	{.name = "ima-sig", .fmt = "d-ng|n-ng|sig"},
 	{.name = "ima-buf", .fmt = "d-ng|n-ng|buf"},
 	{.name = "ima-modsig", .fmt = "d-ng|n-ng|sig|d-modsig|modsig"},
-	{.name = "ima-events",.fmt = "COE|subject",
+	{.name = "ima-events",.fmt = "COE|cell",
 	 .genhash = ima_events_genhash},
 	{.name = "", .fmt = ""},	/* placeholder for a custom format */
 };
@@ -51,7 +51,7 @@ static const struct ima_template_field supported_fields[] = {
 	 .field_show = ima_show_template_sig},
 	{.field_id = "COE",.field_init = ima_event_COE_init,
 	 .field_show = ima_show_template_digest},
-	{.field_id = "subject",.field_init = ima_event_subject_init,
+	{.field_id = "cell",.field_init = ima_event_cell_init,
 	 .field_show = ima_show_template_digest}
 };
 
diff --git a/security/integrity/ima/ima_template_lib.c b/security/integrity/ima/ima_template_lib.c
index 05232cb47bb6..8a187a855885 100644
--- a/security/integrity/ima/ima_template_lib.c
+++ b/security/integrity/ima/ima_template_lib.c
@@ -1,3 +1,4 @@
+
 // SPDX-License-Identifier: GPL-2.0-only
 /*
  * Copyright (C) 2013 Politecnico di Torino, Italy
@@ -489,20 +490,20 @@ int ima_event_COE_init(struct ima_event_data *event_data,
 }
 
 /*
- *  ima_event_actor_init - Generate measurement of event subject.
+ *  ima_eventcell_init - Generate measurement of event cell.
  */
-int ima_event_subject_init(struct ima_event_data *event_data,
-			   struct ima_field_data *field_data)
+int ima_event_cell_init(struct ima_event_data *event_data,
+			struct ima_field_data *field_data)
 {
-	char subject[WP256_DIGEST_SIZE];
+	char cell[WP256_DIGEST_SIZE];
 	int rc = 0;
 	enum data_formats fmt = DATA_FMT_HEX;
 
-	rc = ima_get_subject(event_data, field_data, subject);
+	rc = ima_get_cell(event_data, field_data, cell);
 	if (rc!=0)
 		return rc;
 
-	rc = ima_write_template_field_data(subject, sizeof(subject), fmt,
+	rc = ima_write_template_field_data(cell, sizeof(cell), fmt, \
 					   field_data);
 	return rc;
 }
diff --git a/security/integrity/ima/ima_template_lib.h b/security/integrity/ima/ima_template_lib.h
index da0bce5430fb..33c5bed0cae5 100644
--- a/security/integrity/ima/ima_template_lib.h
+++ b/security/integrity/ima/ima_template_lib.h
@@ -50,7 +50,7 @@ int ima_eventmodsig_init(struct ima_event_data *event_data,
 			 struct ima_field_data *field_data);
 int ima_event_COE_init(struct ima_event_data *event_data,
 			struct ima_field_data *field_data);
-int ima_event_subject_init(struct ima_event_data *event_data,
+int ima_event_cell_init(struct ima_event_data *event_data,
 			struct ima_field_data *field_data);
 int ima_hostid_init(struct integrity_iint_cache *iint, struct file *file,
 		    const unsigned char *filename,
-- 
2.31.1

