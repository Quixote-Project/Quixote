From 7fccad3ce3de8cea9c35fca203c7057313233961 Mon Sep 17 00:00:00 2001
From: "Dr. Greg" <greg@enjellic.com>
Date: Wed, 13 Oct 2021 18:45:20 -0500
Subject: [PATCH 51/55] Update to COE nomenclature for processes.

This commit converts the TSEM modeling to use the COE acronym for
the context of execution that is involved in a security event.
This is consistent with the new Quixote nomenclature.
---
 fs/proc/array.c                           |   2 +-
 include/linux/sched.h                     |   2 +-
 kernel/fork.c                             |   2 +-
 security/integrity/ima/ima.h              |   2 +-
 security/integrity/ima/ima_events.c       | 180 +++++++++++-----------
 security/integrity/ima/ima_template.c     |   4 +-
 security/integrity/ima/ima_template_lib.c |  10 +-
 security/integrity/ima/ima_template_lib.h |   2 +-
 security/te/te.c                          |   8 +-
 9 files changed, 106 insertions(+), 106 deletions(-)

diff --git a/fs/proc/array.c b/fs/proc/array.c
index db2889279df2..5c831d475745 100644
--- a/fs/proc/array.c
+++ b/fs/proc/array.c
@@ -381,7 +381,7 @@ static inline void task_context_switch_counts(struct seq_file *m,
 static inline void task_behavior_status(struct seq_file *m,
 					struct task_struct *p)
 {
-	seq_printf(m, "bad_actor:\t%u\n", p->bad_actor);
+	seq_printf(m, "bad_COE:\t%u\n", p->bad_COE);
 }
 
 static void task_cpus_allowed(struct seq_file *m, struct task_struct *task)
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 8ff9eff6b891..099ca29939b1 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -782,7 +782,7 @@ struct task_struct {
 #endif
 
 #ifdef CONFIG_IMA
-	unsigned			bad_actor;
+	unsigned			bad_COE;
 	struct ima_events_namespace	*nsenter_events_ns;
 #endif
 
diff --git a/kernel/fork.c b/kernel/fork.c
index 245854ab6660..caf110c9e739 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1978,7 +1978,7 @@ static __latent_entropy struct task_struct *copy_process(
 	p->sequential_io_avg	= 0;
 #endif
 #ifdef CONFIG_IMA
-	p->bad_actor = current->bad_actor;
+	p->bad_COE = current->bad_COE;
 #endif
 
 	/* Perform scheduler related setup. Assign this task to a CPU. */
diff --git a/security/integrity/ima/ima.h b/security/integrity/ima/ima.h
index 31bac6f7df8a..3b99b1da9af9 100644
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@ -169,7 +169,7 @@ int ima_lsm_policy_change(struct notifier_block *nb, unsigned long event,
 			  void *lsm_data);
 int ima_events_init(void);
 int ima_events_genhash(struct ima_template_entry *, char *);
-int ima_get_actor(struct ima_field_data *, char *);
+int ima_get_COE(struct ima_field_data *, char *);
 int ima_get_subject(struct ima_event_data *, struct ima_field_data *, char *);
 int ima_events_is_mapped(int, struct integrity_iint_cache *iint,
 			 struct file *file, const char *pathname,
diff --git a/security/integrity/ima/ima_events.c b/security/integrity/ima/ima_events.c
index 7176a327694b..3bbe74149f64 100644
--- a/security/integrity/ima/ima_events.c
+++ b/security/integrity/ima/ima_events.c
@@ -33,8 +33,8 @@
 #define IMA_TE_ENFORCE		0x8
 #define IMA_EVENT_EXTERNAL	0x10
 
-/* Structure defining actor elements. */
-struct event_actor {
+/* Structure defining COE elements. */
+struct event_COE {
 	uid_t uid;
 	uid_t euid;
 	uid_t suid;
@@ -148,7 +148,7 @@ struct trajectory {
 	char *filename;
 	char *process;
 	pid_t pid;
-	struct event_actor actor;
+	struct event_COE COE;
 	struct event_subject subject;
 };
 
@@ -352,36 +352,36 @@ static int add_aggregate(struct crypto_shash *tfm, struct ima_events_map *map)
 }
 
 /**
- *	get_actor - Retrieve context of execution event description.
+ *	get_COE - Retrieve context of execution event description.
  *	*id: A pointer to the structure that will be populated with
- *	the actor description data.
+ *	the COE description data.
  *
  *	This function populates the provided structure with the
  *	elements used to define the event measurement for a
  *	context of execution.
  */
 
-static void get_actor(struct event_actor *actor)
+static void get_COE(struct event_COE *COE)
 
 {
 	kernel_cap_t eff, per, inh;
 
-	actor->uid = from_kuid(&init_user_ns, current_uid());
-	actor->euid = from_kuid(&init_user_ns, current_euid());
-	actor->suid = from_kuid(&init_user_ns, current_suid());
+	COE->uid = from_kuid(&init_user_ns, current_uid());
+	COE->euid = from_kuid(&init_user_ns, current_euid());
+	COE->suid = from_kuid(&init_user_ns, current_suid());
 
-	actor->gid = from_kgid(&init_user_ns, current_gid());
-	actor->egid = from_kgid(&init_user_ns, current_egid());
-	actor->sgid = from_kgid(&init_user_ns, current_sgid());
+	COE->gid = from_kgid(&init_user_ns, current_gid());
+	COE->egid = from_kgid(&init_user_ns, current_egid());
+	COE->sgid = from_kgid(&init_user_ns, current_sgid());
 
-	actor->fsuid = from_kuid(&init_user_ns, current_fsuid());
-	actor->fsgid = from_kgid(&init_user_ns, current_fsgid());
+	COE->fsuid = from_kuid(&init_user_ns, current_fsuid());
+	COE->fsgid = from_kgid(&init_user_ns, current_fsgid());
 
 	if (security_capget(current, &eff, &inh, &per) != 0 ) {
 		eff = CAP_FULL_SET;
 		per = CAP_FULL_SET;
 	}
-	actor->capability.mask = cap_combine(eff, per);
+	COE->capability.mask = cap_combine(eff, per);
 
 	return;
 }
@@ -489,7 +489,7 @@ static int add_event_point(char *point, bool valid)
  */
 
 static struct trajectory * create_point(const char *filename,
-					struct event_actor *actor,
+					struct event_COE *COE,
 					struct event_subject *subject)
 {
 	bool err = true;
@@ -511,7 +511,7 @@ static struct trajectory * create_point(const char *filename,
 	strcpy(entry->filename, filename);
 	strcpy(entry->process, current->comm);
 	entry->pid = task_pid_nr(current);
-	entry->actor = *actor;
+	entry->COE = *COE;
 	entry->subject = *subject;
 
 	err = false;
@@ -526,14 +526,14 @@ static struct trajectory * create_point(const char *filename,
 /**
  *	add_trajectory_point - Add a point to the event trajectory.
  *	@filename: The name of the event.
- *	@actor: The actor elements.
+ *	@COE: The COE elements.
  *	@subject: The subject event elements.
  *
  *	Returns a non-zero value on a failure to add a point.
  */
 
 static int add_trajectory_point(const char *filename,
-				struct event_actor *actor,
+				struct event_COE *COE,
 				struct event_subject *subject)
 {
 	int retn = 1;
@@ -541,7 +541,7 @@ static int add_trajectory_point(const char *filename,
 	struct trajectory *entry;
 	struct ima_events_map *map= current_map();
 
-	entry = create_point(filename, actor, subject);
+	entry = create_point(filename, COE, subject);
 	if ( !entry )
 		goto done;
 
@@ -564,14 +564,14 @@ static int add_trajectory_point(const char *filename,
  *	add_forensic_point - Add a point which documents a forensic
  *	event on the trajectory surface.
  *	@filename: The name of the event.
- *	@actor: The actor elements.
+ *	@COE: The COE elements.
  *	@subject: The subject event elements.
  *
  *	Returns a non-zero value on a failure to add a point.
  */
 
 static int add_forensic_point(const char *filename,
-			      struct event_actor *actor,
+			      struct event_COE *COE,
 			      struct event_subject *subject)
 {
 	int retn = 1;
@@ -581,7 +581,7 @@ static int add_forensic_point(const char *filename,
 	if (map->forensics_count == map->max_forensics_count)
 		return 1;
 
-	entry = create_point(filename, actor, subject);
+	entry = create_point(filename, COE, subject);
 	if ( !entry )
 		goto done;
 
@@ -598,7 +598,7 @@ static int add_forensic_point(const char *filename,
 	return retn;
 }
 
-static int export_event(const char *filename, struct event_actor *actor,
+static int export_event(const char *filename, struct event_COE *COE,
 			struct event_subject *subject)
 {
 	int retn = 1;
@@ -616,7 +616,7 @@ static int export_event(const char *filename, struct event_actor *actor,
 		goto done;
 	}
 
-	event = create_point(filename, actor, subject);
+	event = create_point(filename, COE, subject);
 	if (!event) {
 		retn = -ENOMEM;
 		goto done;
@@ -633,21 +633,21 @@ static int export_event(const char *filename, struct event_actor *actor,
 	pr_debug("[%s]: %u sleeping for authorization on %s:%s.\n", __func__,
 		 task_pid_nr(current), current->comm, filename);
 
-	current->bad_actor = 2;
-	while (current->bad_actor == 2) {
+	current->bad_COE = 2;
+	while (current->bad_COE == 2) {
 		set_current_state(TASK_INTERRUPTIBLE);
 		schedule();
 		if (signal_pending(current)) {
 			if (sigismember(&current->pending.signal, SIGKILL) ||
 			    sigismember(&current->signal->shared_pending.signal,
 					SIGKILL))
-				current->bad_actor = 1;
+				current->bad_COE = 1;
 		}
 	}
 
 	pr_debug("[%s]: %u signal %u continue %s:%s with status %u\n",
 		 __func__, task_pid_nr(current), signal_pending(current),
-		 current->comm, filename, current->bad_actor);
+		 current->comm, filename, current->bad_COE);
  done:
 	return retn;
 }
@@ -898,20 +898,20 @@ static ssize_t show_ns_update(struct kobject *kobj,
 				       mp->u.measurement);
 			break;
 		case exchange_event:
-			retn = sprintf(page, "exchange pid{%u} event{%s:%s} actor{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
+			retn = sprintf(page, "exchange pid{%u} event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
 				       mp->u.exchange->pid,
 				       mp->u.exchange->process,
 				       mp->u.exchange->filename,
-				       mp->u.exchange->actor.uid,
-				       mp->u.exchange->actor.euid,
-				       mp->u.exchange->actor.suid,
-				       mp->u.exchange->actor.gid,
-				       mp->u.exchange->actor.egid,
+				       mp->u.exchange->COE.uid,
+				       mp->u.exchange->COE.euid,
+				       mp->u.exchange->COE.suid,
+				       mp->u.exchange->COE.gid,
+				       mp->u.exchange->COE.egid,
 
-				       mp->u.exchange->actor.sgid,
-				       mp->u.exchange->actor.fsuid,
-				       mp->u.exchange->actor.fsgid,
-				       mp->u.exchange->actor.capability.value,
+				       mp->u.exchange->COE.sgid,
+				       mp->u.exchange->COE.fsuid,
+				       mp->u.exchange->COE.fsgid,
+				       mp->u.exchange->COE.capability.value,
 
 				       mp->u.exchange->subject.uid,
 				       mp->u.exchange->subject.gid,
@@ -931,7 +931,7 @@ static ssize_t show_ns_update(struct kobject *kobj,
 			break;
 
 		case ai_event:
-			retn = sprintf(page, "ai_event actor{%s} event{%s} action{%s}\n",
+			retn = sprintf(page, "ai_event COE{%s} event{%s} action{%s}\n",
 				       mp->u.ai.process,
 				       mp->u.ai.descn->description,
 				       AI_actions[mp->u.ai.descn->action]);
@@ -974,11 +974,11 @@ static int ima_trajectory_show(struct seq_file *c, void *trajectory)
 
 	pt = list_entry(trajectory, struct trajectory, list);
 
-	seq_printf(c, "event{%s:%s} actor{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
-		   pt->process, pt->filename, pt->actor.uid, pt->actor.euid,
-		   pt->actor.suid, pt->actor.gid, pt->actor.egid,
-		   pt->actor.sgid, pt->actor.fsuid, pt->actor.fsgid,
-		   pt->actor.capability.value, pt->subject.uid,
+	seq_printf(c, "event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
+		   pt->process, pt->filename, pt->COE.uid, pt->COE.euid,
+		   pt->COE.suid, pt->COE.gid, pt->COE.egid,
+		   pt->COE.sgid, pt->COE.fsuid, pt->COE.fsgid,
+		   pt->COE.capability.value, pt->subject.uid,
 		   pt->subject.gid, pt->subject.mode, pt->subject.name_length,
 		   WP256_DIGEST_SIZE, pt->subject.name, pt->subject.s_id,
 		   (int) sizeof(pt->subject.s_uuid), pt->subject.s_uuid,
@@ -1381,11 +1381,11 @@ static int ima_forensics_show(struct seq_file *c, void *event)
 
 	pt = list_entry(event, struct trajectory, list);
 
-	seq_printf(c, "event{%s:%s} actor{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
-		   pt->process, pt->filename, pt->actor.uid, pt->actor.euid,
-		   pt->actor.suid, pt->actor.gid, pt->actor.egid,
-		   pt->actor.sgid, pt->actor.fsuid, pt->actor.fsgid,
-		   pt->actor.capability.value, pt->subject.uid,
+	seq_printf(c, "event{%s:%s} COE{uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=0x%llx} subject{uid=%d, gid=%d, mode=0%o, name_length=%u, name=%*phN, s_id=%s, s_uuid=%*phN, digest=%*phN}\n",
+		   pt->process, pt->filename, pt->COE.uid, pt->COE.euid,
+		   pt->COE.suid, pt->COE.gid, pt->COE.egid,
+		   pt->COE.sgid, pt->COE.fsuid, pt->COE.fsgid,
+		   pt->COE.capability.value, pt->subject.uid,
 		   pt->subject.gid, pt->subject.mode, pt->subject.name_length,
 		   WP256_DIGEST_SIZE, pt->subject.name, pt->subject.s_id,
 		   (int) sizeof(pt->subject.s_uuid), pt->subject.s_uuid,
@@ -1618,8 +1618,8 @@ int ima_events_genhash(struct ima_template_entry *entry, char *tpm_digest)
 	return retn;
 }
 
-static int ima_get_event_actor(struct crypto_shash *tfm,
-			       struct event_actor *actor,
+static int ima_get_event_COE(struct crypto_shash *tfm,
+			       struct event_COE *COE,
 			       char *mapping)
 {
 	int retn = 0;
@@ -1630,12 +1630,12 @@ static int ima_get_event_actor(struct crypto_shash *tfm,
 	if (retn != 0)
 		goto done;
 
-	get_actor(actor);
-	retn = crypto_shash_finup(shash, (char *) actor, sizeof(*actor),
+	get_COE(COE);
+	retn = crypto_shash_finup(shash, (char *) COE, sizeof(*COE),
 				  mapping);
 	pr_debug("IMA[%s]: comm=%s, pid=%d, [ue]id=%d/%d, caps=%llx, measurement=%*phN\n",
-		__func__, current->comm, current->pid, actor->uid,
-		actor->euid, actor->capability.value, WP256_DIGEST_SIZE,
+		__func__, current->comm, current->pid, COE->uid,
+		COE->euid, COE->capability.value, WP256_DIGEST_SIZE,
 		mapping);
 
  done:
@@ -1643,29 +1643,29 @@ static int ima_get_event_actor(struct crypto_shash *tfm,
 }
 
 
-int ima_get_actor(struct ima_field_data *field_data, char *measurement)
+int ima_get_COE(struct ima_field_data *field_data, char *measurement)
 {
 	int retn = 1;
 	struct crypto_shash *tfm;
-	struct event_actor *actor = NULL;
+	struct event_COE *COE = NULL;
 
 	tfm = crypto_alloc_shash("sha256", 0, 0);
 	if (IS_ERR(tfm))
 		return PTR_ERR(tfm);
 
-	actor = kzalloc(sizeof(*actor), GFP_KERNEL);
-	if (!actor)
+	COE = kzalloc(sizeof(*COE), GFP_KERNEL);
+	if (!COE)
 		goto done;
 
-	retn = ima_get_event_actor(tfm, actor, measurement);
+	retn = ima_get_event_COE(tfm, COE, measurement);
 	if(retn!=0)
 		goto done;
-	field_data->point = actor;
+	field_data->point = COE;
 	retn = 0;
 
  done:
 	if (retn)
-		kfree(actor);
+		kfree(COE);
 	crypto_free_shash(tfm);
 	return retn;
 }
@@ -1780,7 +1780,7 @@ int ima_get_subject(struct ima_event_data *event_data,
 static int ima_map_event(int function, struct integrity_iint_cache *iint,
 			 struct ima_template_desc *template_desc,
 			 struct file *file, const char *pathname,
-			 struct event_actor *actor,
+			 struct event_COE *COE,
 			 struct event_subject *subject, char *mapping)
 {
 	int retn, num_fields;
@@ -1808,7 +1808,7 @@ static int ima_map_event(int function, struct integrity_iint_cache *iint,
 					 entry->template_desc,
 					 num_fields, &hash.hdr);
 
-	*actor = *(struct event_actor *) entry->template_data[0].point;
+	*COE = *(struct event_COE *) entry->template_data[0].point;
 	*subject = *(struct event_subject *) entry->template_data[1].point;
 	memcpy(mapping, hash.digest, sizeof(hash.digest));
 
@@ -1819,7 +1819,7 @@ static int ima_map_event(int function, struct integrity_iint_cache *iint,
 	return retn;
 }
 
-static void ima_set_actor_status(int function, const char *pathname,
+static void ima_set_COE_status(int function, const char *pathname,
 				 struct event_subject *subject,
 				 char *mapping)
 {
@@ -1832,12 +1832,12 @@ static void ima_set_actor_status(int function, const char *pathname,
 	if ((function != BPRM_CHECK) && (function != MMAP_CHECK))
 		return;
 
-	pr_debug("[%s]: Actor %d:%s function=%d, subject=%*phN, status=%u\n",
+	pr_debug("[%s]: COE %d:%s function=%d, subject=%*phN, status=%u\n",
 		 __func__, current->pid, pathname, function, WP256_DIGEST_SIZE,
-		 subject->digest, current->bad_actor);
+		 subject->digest, current->bad_COE);
 	if (!have_valid_point(mapping)) {
-		current->bad_actor = 1;
-		pr_debug("[%s]: Setting bad actor status.\n", __func__);
+		current->bad_COE = 1;
+		pr_debug("[%s]: Setting bad COE status.\n", __func__);
 	}
 
 	return;
@@ -1850,13 +1850,13 @@ int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
 {
 	int retn = 0;
 	char mapping[WP256_DIGEST_SIZE];
-	struct event_actor actor;
+	struct event_COE COE;
 	struct event_subject subject;
 	struct crypto_shash *sha256 = NULL;
 	struct ima_events_map *map = current_map();
 
 	if (ima_map_event(function, iint, template_desc, file, pathname,
-			  &actor, &subject, mapping) != 0)
+			  &COE, &subject, mapping) != 0)
 		return 0;
 
 	if (map->emit_aggregate) {
@@ -1871,11 +1871,11 @@ int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
 	}
 
 	if (map->external) {
-		retn = export_event(pathname, &actor, &subject);
+		retn = export_event(pathname, &COE, &subject);
 		return retn < 0 ? 0 : 1;
 	}
 
-	ima_set_actor_status(function, pathname, &subject, mapping);
+	ima_set_COE_status(function, pathname, &subject, mapping);
 
 	if (have_point(mapping)) {
 		pr_debug("[%s]: Point cache hit path=%s, mapping=%*phN\n",
@@ -1891,9 +1891,9 @@ int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
 	update_events_measurement(sha256, mapping);
 	crypto_free_shash(sha256);
 
-	pr_debug("[%s] actor uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=%llx\n", __func__, actor.uid, actor.euid,
-		actor.suid, actor.gid, actor.egid, actor.sgid, actor.fsuid,
-		actor.fsgid, actor.capability.value);
+	pr_debug("[%s] COE uid=%d, euid=%d, suid=%d, gid=%d, egid=%d, sgid=%d, fsuid=%d, fsgid=%d, cap=%llx\n", __func__, COE.uid, COE.euid,
+		COE.suid, COE.gid, COE.egid, COE.sgid, COE.fsuid,
+		COE.fsgid, COE.capability.value);
 	pr_debug("[%s] subject: filename=%s, mode=o%o, uid=%u, gid=%u, name size/hash=%u/%*phN, super name/uuid=%s/%*phN, subject=%*phN\n",
 		__func__, pathname, subject.mode, subject.uid, subject.gid,
 		subject.name_length, WP256_DIGEST_SIZE, subject.name,
@@ -1901,14 +1901,14 @@ int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
 		WP256_DIGEST_SIZE, subject.digest);
 
 	if (map->domain_sealed) {
-		retn = add_forensic_point(pathname, &actor, &subject);
+		retn = add_forensic_point(pathname, &COE, &subject);
 		if (retn == 0 )
 			retn = add_event_point(mapping, false);
 	}
 	else {
 		retn = add_event_point(mapping, true);
 		if (retn == 0)
-			retn = add_trajectory_point(pathname, &actor,
+			retn = add_trajectory_point(pathname, &COE,
 						    &subject);
 	}
 	if (retn != 0 )
@@ -2344,38 +2344,38 @@ SYSCALL_DEFINE2(set_bad_actor, pid_t, pid, unsigned long, flags)
 {
 	bool wakeup = true;
 	int retn = -ESRCH;
-	struct task_struct *actor;
+	struct task_struct *COE;
 
 	if (!capable(CAP_TRUST))
 		return -EPERM;
 
 	rcu_read_lock();
-	actor = find_task_by_vpid(pid);
-	if (actor != NULL) {
+	COE = find_task_by_vpid(pid);
+	if (COE != NULL) {
 		if (flags == 0) {
-			pr_debug("[%s]: Checking actor status, pid=%u\n",
+			pr_debug("[%s]: Checking COE status, pid=%u\n",
 				 __func__, pid);
 			wakeup = false;
-			retn = actor->bad_actor;
+			retn = COE->bad_COE;
 		}
 
 		if (flags == 1) {
-			actor->bad_actor = 1;
+			COE->bad_COE = 1;
 			retn = 0;
 		}
 
 		if (flags == 2) {
-			actor->bad_actor = 0;
+			COE->bad_COE = 0;
 			retn = 0;
 		}
 	}
 	rcu_read_unlock();
 
 	if (wakeup) {
-		wake_up_process(actor);
-		pr_debug("[%s]: Releasing actor: pid=%u, comm=%s, status=%u\n",
-			 __func__, task_pid_nr(actor), actor->comm,
-			 actor->bad_actor);
+		wake_up_process(COE);
+		pr_debug("[%s]: Releasing COE: pid=%u, comm=%s, status=%u\n",
+			 __func__, task_pid_nr(COE), COE->comm, \
+			 COE->bad_COE);
 	}
 
 	return retn;
diff --git a/security/integrity/ima/ima_template.c b/security/integrity/ima/ima_template.c
index 944792863225..add366005120 100644
--- a/security/integrity/ima/ima_template.c
+++ b/security/integrity/ima/ima_template.c
@@ -24,7 +24,7 @@ static struct ima_template_desc builtin_templates[] = {
 	{.name = "ima-sig", .fmt = "d-ng|n-ng|sig"},
 	{.name = "ima-buf", .fmt = "d-ng|n-ng|buf"},
 	{.name = "ima-modsig", .fmt = "d-ng|n-ng|sig|d-modsig|modsig"},
-	{.name = "ima-events",.fmt = "actor|subject",
+	{.name = "ima-events",.fmt = "COE|subject",
 	 .genhash = ima_events_genhash},
 	{.name = "", .fmt = ""},	/* placeholder for a custom format */
 };
@@ -49,7 +49,7 @@ static const struct ima_template_field supported_fields[] = {
 	 .field_show = ima_show_template_digest_ng},
 	{.field_id = "modsig", .field_init = ima_eventmodsig_init,
 	 .field_show = ima_show_template_sig},
-	{.field_id = "actor",.field_init = ima_event_actor_init,
+	{.field_id = "COE",.field_init = ima_event_COE_init,
 	 .field_show = ima_show_template_digest},
 	{.field_id = "subject",.field_init = ima_event_subject_init,
 	 .field_show = ima_show_template_digest}
diff --git a/security/integrity/ima/ima_template_lib.c b/security/integrity/ima/ima_template_lib.c
index 5bfb88df1aa6..05232cb47bb6 100644
--- a/security/integrity/ima/ima_template_lib.c
+++ b/security/integrity/ima/ima_template_lib.c
@@ -470,20 +470,20 @@ int ima_eventmodsig_init(struct ima_event_data *event_data,
 }
 
 /*
- *  ima_event_actor_init - Generate measurement of event actor.
+ *  ima_event_COE_init - Generate measurement of a context of execution.
  */
-int ima_event_actor_init(struct ima_event_data *event_data,
+int ima_event_COE_init(struct ima_event_data *event_data,
 			 struct ima_field_data *field_data)
 {
-	char actor[WP256_DIGEST_SIZE];
+	char COE[WP256_DIGEST_SIZE];
 	enum data_formats fmt = DATA_FMT_HEX;
 	int rc = 0;
 
-	rc = ima_get_actor(field_data, actor);
+	rc = ima_get_COE(field_data, COE);
 	if (rc!=0)
 		return rc;
 
-	rc = ima_write_template_field_data(actor, sizeof(actor),
+	rc = ima_write_template_field_data(COE, sizeof(COE),
 					   fmt, field_data);
 	return rc;
 }
diff --git a/security/integrity/ima/ima_template_lib.h b/security/integrity/ima/ima_template_lib.h
index bf57db56fab4..da0bce5430fb 100644
--- a/security/integrity/ima/ima_template_lib.h
+++ b/security/integrity/ima/ima_template_lib.h
@@ -48,7 +48,7 @@ int ima_eventbuf_init(struct ima_event_data *event_data,
 		      struct ima_field_data *field_data);
 int ima_eventmodsig_init(struct ima_event_data *event_data,
 			 struct ima_field_data *field_data);
-int ima_event_actor_init(struct ima_event_data *event_data,
+int ima_event_COE_init(struct ima_event_data *event_data,
 			struct ima_field_data *field_data);
 int ima_event_subject_init(struct ima_event_data *event_data,
 			struct ima_field_data *field_data);
diff --git a/security/te/te.c b/security/te/te.c
index 9212938af594..699a54b8d1b0 100644
--- a/security/te/te.c
+++ b/security/te/te.c
@@ -39,7 +39,7 @@ enum TEevent_type {
  */
 static int te_file_open(struct file *f)
 {
-	if ( !current->bad_actor )
+	if ( !current->bad_COE )
 		return 0;
 
 	pr_debug("%s: Bad actor=%s, subject=%s, flags=0x%x\n", __func__,
@@ -72,7 +72,7 @@ static int te_inode_unlink(struct inode *dir, struct dentry *dentry)
 {
 	bool retn = 0;
 
-	if (!current->bad_actor)
+	if (!current->bad_COE)
 		ima_events_remove_pseudonym(dentry->d_inode);
 
 	return retn;
@@ -94,7 +94,7 @@ static int te_socket_connect(struct socket *sock, struct sockaddr *addr,
 			     int addr_len)
 
 {
-	if ( !current->bad_actor )
+	if ( !current->bad_COE )
 		return 0;
 
 	pr_info("%s: Refused socket open: pid=%u, comm=%s, family=%u, length=%d, addr=%*phN\n",
@@ -117,7 +117,7 @@ static int te_socket_connect(struct socket *sock, struct sockaddr *addr,
 static int te_socket_listen(struct socket *sock, int backlog)
 
 {
-	if ( !current->bad_actor )
+	if ( !current->bad_COE )
 		return 0;
 
 	pr_info("%s: Refused socket listen: pid=%u, comm=%s, backlog=%d\n",
-- 
2.31.1

