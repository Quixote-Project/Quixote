From 2be2126c7bf41fc308c714f4cd02d1c7c688fa4a Mon Sep 17 00:00:00 2001
From: "Dr. Greg" <greg@enjellic.com>
Date: Sat, 6 Feb 2021 11:42:09 -0600
Subject: [PATCH 15/50] Convert from host identity to event base point.

This update changes naming convention to change from the concept
of a host identity to an event base point.  This is once again
consistent with the notion that TE modeling is looking at a field
of events.

This commit also drops the external reference to the
host_identity variable from ima.h.  There has not been an actual
instance of that variable since the driver was converted to a
namespace implementation.
---
 security/integrity/ima/ima.h        |  3 --
 security/integrity/ima/ima_events.c | 45 ++++++++++++++---------------
 2 files changed, 22 insertions(+), 26 deletions(-)

diff --git a/security/integrity/ima/ima.h b/security/integrity/ima/ima.h
index 7edd974044d2..abe929807f04 100644
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@ -73,9 +73,6 @@ struct ima_field_data {
 	u32 len;
 };
 
-/* Host identity, defined in ima_events.c */
-extern char *hostid;
-
 struct ima_template_entry;
 
 /* IMA template field definition */
diff --git a/security/integrity/ima/ima_events.c b/security/integrity/ima/ima_events.c
index f136425f1174..e5d481529850 100644
--- a/security/integrity/ima/ima_events.c
+++ b/security/integrity/ima/ima_events.c
@@ -79,7 +79,7 @@ static struct dentry *events_dir;
 static struct dentry *points;
 static struct dentry *map;
 static struct dentry *pseudonym;
-static struct dentry *host_identity;
+static struct dentry *base;
 static struct dentry *sealed;
 static struct dentry *forensics;
 static struct dentry *measurement_file;
@@ -171,7 +171,7 @@ struct event {
  * to support an events namespace.
  */
 struct ima_events_map {
-	char hostid[WP256_DIGEST_SIZE];
+	char base[WP256_DIGEST_SIZE];
 	char measurement [WP256_DIGEST_SIZE];
 
 	struct event_point cp;
@@ -556,7 +556,7 @@ static int get_host_measurement(struct crypto_shash *tfm, char *id,
 	retn = crypto_shash_init(shash);
 	if (retn != 0)
 		goto done;
-	retn = crypto_shash_update(shash, map->hostid, WP256_DIGEST_SIZE);
+	retn = crypto_shash_update(shash, map->base, WP256_DIGEST_SIZE);
 	if (retn != 0)
 		goto done;
 	retn = crypto_shash_finup(shash, id, idlength, digest);
@@ -1045,7 +1045,7 @@ static const struct file_operations ima_pseudonym_ops = {
 	.llseek = generic_file_llseek,
 };
 
-static int ima_open_host_identity(struct inode * inode, struct file * filp)
+static int ima_open_base(struct inode * inode, struct file * filp)
 {
 	struct ima_events_map *map = current_map();
 
@@ -1056,15 +1056,15 @@ static int ima_open_host_identity(struct inode * inode, struct file * filp)
 	return 0;
 }
 
-static ssize_t ima_write_host_identity(struct file *file,
+static ssize_t ima_write_base(struct file *file,
 				       const char __user *buf, size_t datalen,
 				       loff_t *ppos)
 {
-	char *p, id[WP256_DIGEST_SIZE*2 + 1];
+	char *p, base[WP256_DIGEST_SIZE*2 + 1];
 	ssize_t retn;
 	struct ima_events_map *map = current_map();
 
-	if (datalen != sizeof(id)) {
+	if (datalen != sizeof(base)) {
 		retn = -EINVAL;
 		goto done;
 	}
@@ -1074,40 +1074,40 @@ static ssize_t ima_write_host_identity(struct file *file,
 		goto done;
 	}
 
-	if (copy_from_user(id, buf, datalen)) {
+	if (copy_from_user(base, buf, datalen)) {
 		retn = -EFAULT;
 		goto done;
 	}
 
-	p = strchr(id, '\n');
+	p = strchr(base, '\n');
 	if (!p) {
 		retn = -EINVAL;
 		goto done;
 	}
 	*p = '\0';
 
-	if (hex2bin(map->hostid, id, WP256_DIGEST_SIZE)) {
+	if (hex2bin(map->base, base, WP256_DIGEST_SIZE)) {
 		retn = -EINVAL;
 		goto done;
 	}
 
-	pr_debug("[%s]: Set host identity to %*phN\n", __func__,
-		 (int) WP256_DIGEST_SIZE, map->hostid);
+	pr_debug("[%s]: Set event base to %*phN\n", __func__,
+		 (int) WP256_DIGEST_SIZE, map->base);
 	retn = datalen;
 
 done:
 	return retn;
 }
 
-static int ima_release_host_identity(struct inode *inode, struct file *file)
+static int ima_release_base(struct inode *inode, struct file *file)
 {
 	return 0;
 }
 
-static const struct file_operations ima_host_identity_ops = {
-	.open = ima_open_host_identity,
-	.write = ima_write_host_identity,
-	.release = ima_release_host_identity,
+static const struct file_operations ima_base_ops = {
+	.open = ima_open_base,
+	.write = ima_write_base,
+	.release = ima_release_base,
 	.llseek = generic_file_llseek,
 };
 
@@ -1682,10 +1682,9 @@ int __init ima_events_init(void)
 	if (IS_ERR(pseudonym))
 		goto err;
 
-	host_identity = securityfs_create_file("host_identity", S_IWUSR,
-					       events_dir, NULL,
-					       &ima_host_identity_ops);
-	if (IS_ERR(host_identity))
+	base = securityfs_create_file("base", S_IWUSR, events_dir, NULL,
+					       &ima_base_ops);
+	if (IS_ERR(base))
 		goto err;
 
 	sealed = securityfs_create_file("sealed", S_IWUSR, events_dir, NULL,
@@ -1727,7 +1726,7 @@ int __init ima_events_init(void)
 	securityfs_remove(points);
 	securityfs_remove(map);
 	securityfs_remove(pseudonym);
-	securityfs_remove(host_identity);
+	securityfs_remove(base);
 	securityfs_remove(sealed);
 	securityfs_remove(forensics);
 	securityfs_remove(measurement_file);
@@ -1841,7 +1840,7 @@ static int add_aggregate(struct crypto_shash *tfm,
 	retn = crypto_shash_init(shash);
 	if (retn != 0)
 		goto done;
-	retn = crypto_shash_update(shash, map->hostid, WP256_DIGEST_SIZE);
+	retn = crypto_shash_update(shash, map->base, WP256_DIGEST_SIZE);
 	if (retn != 0)
 		goto done;
 	retn = crypto_shash_finup(shash, aggregate, sizeof(aggregate),
-- 
2.31.1

