From 52e8b8e40f42389d480a41d8c50b25a04369be45 Mon Sep 17 00:00:00 2001
From: "Dr. Greg" <greg@enjellic.com>
Date: Thu, 4 Feb 2021 04:18:43 -0600
Subject: [PATCH 05/50] Convert ima_identity to ima_events.

This update converts all symbol instances that used ima_identity
to use the now canonical ima_events identifier.
---
 include/linux/ima.h                   |  2 +-
 security/integrity/ima/ima.h          | 10 +++++-----
 security/integrity/ima/ima_events.c   | 24 ++++++++++++------------
 security/integrity/ima/ima_init.c     |  2 +-
 security/integrity/ima/ima_main.c     |  4 ++--
 security/integrity/ima/ima_template.c |  2 +-
 security/te/te.c                      |  8 ++++----
 7 files changed, 26 insertions(+), 26 deletions(-)

diff --git a/include/linux/ima.h b/include/linux/ima.h
index ba404fe3f319..7192349b022a 100644
--- a/include/linux/ima.h
+++ b/include/linux/ima.h
@@ -67,7 +67,7 @@ static inline void ima_put_ns(struct iso_identity_namespace *ns)
 {
 	kref_put(&ns->kref, ima_free_ns);
 }
-extern int ima_identity_process_ai(unsigned int);
+extern int ima_events_process_te(unsigned int);
 
 #else
 static inline int ima_bprm_check(struct linux_binprm *bprm)
diff --git a/security/integrity/ima/ima.h b/security/integrity/ima/ima.h
index 13ce339e39e5..2361dcf4c676 100644
--- a/security/integrity/ima/ima.h
+++ b/security/integrity/ima/ima.h
@@ -73,7 +73,7 @@ struct ima_field_data {
 	u32 len;
 };
 
-/* Host identity, defined in ima_identity.c */
+/* Host identity, defined in ima_events.c */
 extern char *hostid;
 
 struct ima_template_entry;
@@ -170,12 +170,12 @@ void ima_init_template_list(void);
 int __init ima_init_digests(void);
 int ima_lsm_policy_change(struct notifier_block *nb, unsigned long event,
 			  void *lsm_data);
-int ima_identity_init(void);
-int ima_identity_genhash(struct ima_template_entry *, char *);
+int ima_events_init(void);
+int ima_events_genhash(struct ima_template_entry *, char *);
 int ima_get_actor(struct ima_field_data *, char *);
 int ima_get_subject(struct ima_event_data *, struct ima_field_data *, char *);
-int ima_identity_is_mapped(int, struct integrity_iint_cache *iint,
-			   struct file *file, const char *pathname,
+int ima_events_is_mapped(int, struct integrity_iint_cache *iint,
+			 struct file *file, const char *pathname,
 			   struct ima_template_desc *, int);
 int ima_fs_init(void);
 struct dentry *ima_fs_init_identity(void);
diff --git a/security/integrity/ima/ima_events.c b/security/integrity/ima/ima_events.c
index dc38017094a2..b534c7fb05f5 100644
--- a/security/integrity/ima/ima_events.c
+++ b/security/integrity/ima/ima_events.c
@@ -9,9 +9,9 @@
  * published by the Free Software Foundation, version 2 of the
  * License.
  *
- * File: ima_identity.c
- *	Implements generation of a process identity.
- *	Implements maintenance of the iso-identity measurement list.
+ * File: ima_events.c
+ *	Implements generation of a a Turing event identity.
+ *	Implements maintenance of the events list.
  */
 #include <linux/namei.h>
 #include <linux/seq_file.h>
@@ -1331,7 +1331,7 @@ static int have_violation(struct file *file, struct integrity_iint_cache *iint,
 	return tomtou || writers;
 }
 
-int ima_identity_genhash(struct ima_template_entry *entry, char *tpm_digest)
+int ima_events_genhash(struct ima_template_entry *entry, char *tpm_digest)
 {
 	int retn;
 	struct {
@@ -1353,7 +1353,7 @@ int ima_identity_genhash(struct ima_template_entry *entry, char *tpm_digest)
 	if (!have_aggregate) {
 		memcpy(aggregate, identity.hdr.digest, WP256_DIGEST_SIZE);
 		have_aggregate = true;
-		pr_debug("ima_identity: Saved aggregate: %*phN\n",
+		pr_debug("%s: Saved aggregate: %*phN\n", __FILE__,
 			 WP256_DIGEST_SIZE, aggregate);
 	}
 
@@ -1599,10 +1599,10 @@ static void ima_set_actor_status(int function, const char *pathname,
 	return;
 }
 
-int ima_identity_is_mapped(int function, struct integrity_iint_cache *iint,
-			   struct file *file, const char *pathname,
-			   struct ima_template_desc *template_desc,
-			   int violation_check)
+int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
+			 struct file *file, const char *pathname,
+			 struct ima_template_desc *template_desc,
+			 int violation_check)
 {
 	int retn = 0;
 	char mapping[WP256_DIGEST_SIZE];
@@ -1659,7 +1659,7 @@ int ima_identity_is_mapped(int function, struct integrity_iint_cache *iint,
 	return retn;
 }
 
-int __init ima_identity_init(void)
+int __init ima_events_init(void)
 {
 	int retn = -1;
 
@@ -1982,10 +1982,10 @@ struct iso_identity_namespace *ima_copy_behavior_ns(unsigned long flags,
 
 /*
  * The following section handles requests to report on the status
- * of processing of AI security events.
+ * of processing of Turing security events.
  */
 
-int ima_identity_process_ai(unsigned int event)
+int ima_events_process_te(unsigned int event)
 {
 	int retn = 0;
 
diff --git a/security/integrity/ima/ima_init.c b/security/integrity/ima/ima_init.c
index f2f2128b0176..a142669e4265 100644
--- a/security/integrity/ima/ima_init.c
+++ b/security/integrity/ima/ima_init.c
@@ -135,5 +135,5 @@ int __init ima_init(void)
 	if (rc != 0)
 		return rc;
 
-	return ima_identity_init();
+	return ima_events_init();
 }
diff --git a/security/integrity/ima/ima_main.c b/security/integrity/ima/ima_main.c
index d9ccee7a2553..14631565894a 100644
--- a/security/integrity/ima/ima_main.c
+++ b/security/integrity/ima/ima_main.c
@@ -348,8 +348,8 @@ static int process_measurement(struct file *file, const struct cred *cred,
 
 	if (action & IMA_MAP) {
 		violation_check = ((func == FILE_CHECK || func == MMAP_CHECK));
-		if (!ima_identity_is_mapped(func, iint, file, pathname,
-					    template_desc, violation_check)) {
+		if (!ima_events_is_mapped(func, iint, file, pathname,
+					  template_desc, violation_check)) {
 			ima_store_measurement(iint, file, pathname,
 					      xattr_value, xattr_len, modsig,
 					      pcr, template_desc);
diff --git a/security/integrity/ima/ima_template.c b/security/integrity/ima/ima_template.c
index 3bd04801fcee..944792863225 100644
--- a/security/integrity/ima/ima_template.c
+++ b/security/integrity/ima/ima_template.c
@@ -25,7 +25,7 @@ static struct ima_template_desc builtin_templates[] = {
 	{.name = "ima-buf", .fmt = "d-ng|n-ng|buf"},
 	{.name = "ima-modsig", .fmt = "d-ng|n-ng|sig|d-modsig|modsig"},
 	{.name = "ima-events",.fmt = "actor|subject",
-	 .genhash = ima_identity_genhash},
+	 .genhash = ima_events_genhash},
 	{.name = "", .fmt = ""},	/* placeholder for a custom format */
 };
 
diff --git a/security/te/te.c b/security/te/te.c
index f6ee2eef8cfe..2370bbef9a97 100644
--- a/security/te/te.c
+++ b/security/te/te.c
@@ -20,7 +20,7 @@
 /*
  * The following defines the type of events that have been triggered.
  * This enumeration must agree with the enumeration in the
- * security/integrity/ima/ima_identity.c file.
+ * security/integrity/ima/ima_events.c file.
  */
 enum TEevent_type {
 	TE_file_open=0,
@@ -57,7 +57,7 @@ static int te_file_open(struct file *f)
 			__func__, current->comm,
 			f->f_path.dentry->d_name.name);
 
-	return ima_identity_process_ai(TE_file_open);
+	return ima_events_process_te(TE_file_open);
 }
 
 
@@ -83,7 +83,7 @@ static int te_socket_connect(struct socket *sock, struct sockaddr *addr,
 	pr_info("%s: Refused socket open, family=%u, length=%d, addr=%*phN\n", 
 		__func__, addr->sa_family, addr_len, addr_len, addr->sa_data);
 
-	return ima_identity_process_ai(TE_socket_connect);
+	return ima_events_process_te(TE_socket_connect);
 }
 
 
@@ -103,7 +103,7 @@ static int te_socket_listen(struct socket *sock, int backlog)
 		return 0;
 
 	pr_info("%s: Refused socket listen, backlog=%d\n", __func__, backlog);
-	return ima_identity_process_ai(TE_socket_listen);
+	return ima_events_process_te(TE_socket_listen);
 }
 
 
-- 
2.31.1

