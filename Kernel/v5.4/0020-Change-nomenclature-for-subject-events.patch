From 1532199bd2eb8d2f07b52ef740a48a2f079a64be Mon Sep 17 00:00:00 2001
From: "Dr. Greg" <greg@enjellic.com>
Date: Thu, 11 Feb 2021 10:08:24 -0600
Subject: [PATCH 20/50] Change nomenclature for subject events.

After some reflection the decision was made to change the
nomenclature for the structure that contains the elements that
characterize a subject event.

This patch changes that structure from:

subject_identity

To:

event_subject

A similar change will be made to the structure that carries the
elements used in the context of execution.
---
 security/integrity/ima/ima_events.c | 40 ++++++++++++++---------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/security/integrity/ima/ima_events.c b/security/integrity/ima/ima_events.c
index 1c32749fed36..1a552218be60 100644
--- a/security/integrity/ima/ima_events.c
+++ b/security/integrity/ima/ima_events.c
@@ -50,8 +50,8 @@ struct actor_event {
 	} capability;
 } __packed;
 
-/* Structure defining subject identity elements. */
-struct subject_identity {
+/* Structure defining subject elements. */
+struct event_subject {
 	uid_t uid;
 	gid_t gid;
 	umode_t mode;
@@ -140,7 +140,7 @@ struct trajectory {
 	char *process;
 	pid_t pid;
 	struct actor_event actor;
-	struct subject_identity subject;
+	struct event_subject subject;
 };
 
 /* Types of events. */
@@ -397,7 +397,7 @@ static int add_event_point(char *point, bool valid)
 
 static struct trajectory * create_point(const char *filename,
 					struct actor_event *actor,
-					struct subject_identity *subject)
+					struct event_subject *subject)
 {
 	bool err = true;
 	char *fname = NULL, *process = NULL;
@@ -434,14 +434,14 @@ static struct trajectory * create_point(const char *filename,
  *	add_trajectory_point - Add a point to the event trajectory.
  *	@filename: The name of the event.
  *	@actor: The actor elements.
- *	@subject: The subject identity elements.
+ *	@subject: The subject event elements.
  *
  *	Returns a non-zero value on a failure to add a point.
  */
 
 static int add_trajectory_point(const char *filename,
 				struct actor_event *actor,
-				struct subject_identity *subject)
+				struct event_subject *subject)
 {
 	int retn = 1;
 	char *fname = NULL, *process = NULL;
@@ -472,14 +472,14 @@ static int add_trajectory_point(const char *filename,
  *	event on the trajectory surface.
  *	@filename: The name of the event.
  *	@actor: The actor elements.
- *	@subject: The subject identity elements.
+ *	@subject: The subject event elements.
  *
  *	Returns a non-zero value on a failure to add a point.
  */
 
 static int add_forensic_point(const char *filename,
 			      struct actor_event *actor,
-			      struct subject_identity *subject)
+			      struct event_subject *subject)
 {
 	int retn = 1;
 	struct trajectory *entry;
@@ -507,7 +507,7 @@ static int add_forensic_point(const char *filename,
 
 static int add_exchange_event(const char *filename,
 			      struct actor_event *actor,
-			      struct subject_identity *subject)
+			      struct event_subject *subject)
 {
 	int retn = 1;
 	struct ima_events_map *map;
@@ -1436,7 +1436,7 @@ int ima_get_actor(struct ima_field_data *field_data, char *actor)
 }
 
 static int ima_add_subject_name(struct crypto_shash *tfm,
-				struct subject_identity *subject,
+				struct event_subject *subject,
 				struct ima_event_data *event_data)
 {
 	const char *filename;
@@ -1461,8 +1461,8 @@ static int ima_add_subject_name(struct crypto_shash *tfm,
 	return retn;
 }
 
-static int ima_get_subject_identity(struct crypto_shash *tfm,
-				    struct subject_identity *subject,
+static int ima_get_event_subject(struct crypto_shash *tfm,
+				    struct event_subject *subject,
 				    char *identity)
 {
 	int retn = 0;
@@ -1474,7 +1474,7 @@ static int ima_get_subject_identity(struct crypto_shash *tfm,
 		goto done;
 
 	retn = crypto_shash_finup(shash, (char *) subject,
-				  sizeof(struct subject_identity), identity);
+				  sizeof(struct event_subject), identity);
 
  done:
 	return retn;
@@ -1486,7 +1486,7 @@ int ima_get_subject(struct ima_event_data *event_data,
 	const char *filename;
 	int retn=1;
 	struct crypto_shash *tfm;
-	struct subject_identity *identity = NULL;
+	struct event_subject *identity = NULL;
 	struct inode *inode;
 
 	tfm = crypto_alloc_shash("sha256", 0, 0);
@@ -1498,7 +1498,7 @@ int ima_get_subject(struct ima_event_data *event_data,
 		goto done;
 
 	filename = event_data->filename;
-	memset(identity, '\0', sizeof(struct subject_identity));
+	memset(identity, '\0', sizeof(struct event_subject));
 
 	/* Add hash of subject name. */
 	if (ima_add_subject_name(tfm, identity, event_data) != 0)
@@ -1520,7 +1520,7 @@ int ima_get_subject(struct ima_event_data *event_data,
 		       sizeof(identity->s_uuid));
 	}
 
-	retn = ima_get_subject_identity(tfm, identity, subject);
+	retn = ima_get_event_subject(tfm, identity, subject);
 	if (retn)
 		goto done;
 	field_data->point = identity;
@@ -1537,7 +1537,7 @@ static int ima_map_identity(int function, struct integrity_iint_cache *iint,
 			    struct ima_template_desc *template_desc,
 			    struct file *file, const char *pathname,
 			    struct actor_event *actor,
-			    struct subject_identity *subject, char *mapping)
+			    struct event_subject *subject, char *mapping)
 {
 	int retn, num_fields;
 	struct ima_template_entry *entry;
@@ -1565,7 +1565,7 @@ static int ima_map_identity(int function, struct integrity_iint_cache *iint,
 					 num_fields, &hash.hdr);
 
 	*actor = *(struct actor_event *) entry->template_data[0].point;
-	*subject = *(struct subject_identity *) entry->template_data[1].point;
+	*subject = *(struct event_subject *) entry->template_data[1].point;
 	memcpy(mapping, hash.digest, sizeof(hash.digest));
 
 	ima_free_template_entry(entry);
@@ -1576,7 +1576,7 @@ static int ima_map_identity(int function, struct integrity_iint_cache *iint,
 }
 
 static void ima_set_actor_status(int function, const char *pathname,
-				 struct subject_identity *subject,
+				 struct event_subject *subject,
 				 char *mapping)
 {
 	struct ima_events_map *map = current_map();
@@ -1607,7 +1607,7 @@ int ima_events_is_mapped(int function, struct integrity_iint_cache *iint,
 	int retn = 0;
 	char mapping[WP256_DIGEST_SIZE];
 	struct actor_event actor;
-	struct subject_identity subject;
+	struct event_subject subject;
 	struct ima_events_map *map = current_map();
 
 	if (have_violation(file, iint, pathname))
-- 
2.31.1

