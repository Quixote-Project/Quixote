#! /bin/sh

#
# This script detaches the USB device which drives the keyboard
# and mouse and starts a VGT based Windows virtual machine and
# attaches the USB device to it.

# set -xv
PATH="$PATH:/usr/local/musl/sbin";
export PATH;

#
# Functional replacement for cat which reads a single input
# line from a pseudo-file.
#
get() {

	read input < $1;
	echo $input;
}


# The virtual machine name, configuration and id.
VM="VGT";
VMscript="";
VMid="";

# EDID/monitor configuration information.
Monitor_Source="card0-HDMI-A-1";
Monitor_Port="PORT_B";
Monitor_Type="5";

# Monitor_Source="card0-VGA-1";
# Monitor_Port="PORT_E";
# Monitor_Type="0";

# The current driver for the PCI USB device.
Driver="";

# The USB PCI bus in BDF format.
Device="";

# Variable to hold whether or not the VM has exited.
VMdone="";

# Number of 5 second cycles to wait for the VM to come online.
VMwait=35;


#
# This function implements the hotplug of the monitor the guest
# which has been started.
#
connect_monitor() {

	local source="/sys/class/drm/$1" type="$2";
	local target="/sys/kernel/vgt/vm$3/$Monitor_Port";
	local type=$2;

	# dd bs=128 count=1 if=$source/edid of=$target/edid 2> /dev/null;
	copy-edid $source/edid $target/edid;
	echo $type >| $target/type;
	echo "connect" >| $target/connection;

	return;
}


#
# Get the name of the virtual machine script.
#
if [ -z "$1" ]; then
	echo "No virtual machine definition specified.";
	exit 1;
fi;
if [ ! -e "$1" ]; then
	echo "Virtual machine definition not found.";
	exit 1;
fi;
VMscript="$1";


#
# Verify the presence of the device and get its current driver.
#
if [ -z "$2" ]; then
	echo "No USB device specified.";
	exit 1;
fi;
Device="$2";


# Get the driver for the designated device.
if [ ! -d /sys/bus/pci/devices/$Device ]; then
	echo "USB device is not present.";
	exit 1;
fi;

if [ -n "$3" ]; then
	Driver="$3";
else
	Driver=`readlink /sys/bus/pci/devices/$Device/driver`;
	Driver=`basename $Driver`;
fi;


#
# Detach the PCI device and make it generically available to the
# virtual machine infratructure.
#
xl pci-assignable-add $Device;
if [ $? -ne 0 ]; then
	echo "Error assigning USB device to pciback.";
	echo $Device >| /sys/bus/pci/drivers/$Driver/bind;
	exit 1;
fi;


# Add a snapshot volume for the virtual disk.
lvm lvcreate -s -L 5G -n windows_snap /dev/localvg1/windows 2> /dev/null > /dev/null;
if [ $? -ne 0 ]; then
	echo "Error creating snapshot.";
	echo $Device >| /sys/bus/pci/drivers/pciback/unbind;
	echo $Device >| /sys/bus/pci/drivers/$Driver/bind;
	exit 1;
fi;


#
# Start the virtual machine and obtain the VM identifier for the
# machine.  Connect the monitor immediately after domain creation
# since that is when the hotplug event occurs.
#
xl create -q $VMscript;
if [ $? -ne 0 ]; then
	echo "Error starting virtual machine: $VM";
	echo $Device >| /sys/bus/pci/drivers/pciback/unbind;
	echo $Device >| /sys/bus/pci/drivers/$Driver/bind;
	lvm lvremove -f /dev/localvg1/windows_snap 2> /dev/null > /dev/null;
	exit 1;
fi;

VMid=`xl domid $VM`;

connect_monitor $Monitor_Source $Monitor_Type $VMid;


# Wait for the VM to initialize graphics adapter.
echo "Waiting for Windows to start\c";
while [ "$VMdone" != "true" ];
do
	if [ $VMwait -eq 0 ]; then
		echo "Timeout waiting for virtual machine.";
		echo $Device >| /sys/bus/pci/drivers/pciback/unbind;
		echo $Device >| /sys/bus/pci/drivers/$Driver/bind;
		lvm lvremove -f /dev/localvg1/windows_snap 2> /dev/null > /dev/null;
		exit 1;
	else
		VMwait=$((VMwait-1));
	fi;
		
	if [ "$VMid" = "`get /sys/kernel/vgt/control/foreground_vm`" ]; then
		VMdone="true";
		continue;
	fi;
	echo ".\c";
	sleep 2s;
done;
echo "\nWaiting for Windows to complete.";


#
# Attach PCI devices.
#
xl pci-attach $VMid $Device;


#
# Wait for the virtual machine to complete and then re-attach
# USB device to its driver.
#
VMdone="";
while [ "$VMdone" != "true" ];
do
        xl domid $VM >/dev/null 2>&1
        if [ $? -ne 0 ]; then
                VMdone="true";
        else
#                sleep 1m;
		sleep 15s;
        fi;
done;

echo "Releasing resources.";
echo $Device >| /sys/bus/pci/drivers/pciback/unbind;
echo $Device >| /sys/bus/pci/drivers/$Driver/bind;
lvm lvremove -f /dev/localvg1/windows_snap 2> /dev/null > /dev/null;


# All done
exit 0;
